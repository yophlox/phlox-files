/*
* Heya, script modified by @YoPhlox
* Added some shit I thought would be nice lol
*/

using System;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Runtime.Serialization;
using System.Drawing;
using System.Diagnostics;
using System.Windows.Forms;
using UndertaleModLib.Models;
using UndertaleModLib.Util;
using Newtonsoft.Json;
using NAudio.Vorbis;
using NAudio.Wave;
using System.Xml;
using System.Xml.Serialization;

// configuration
var ignore = new List<string>() // ignore certain assets from attempting to decompile
{
	
};
bool skipErrors = true; // skip all errors and instead log them to a txt file
string dataPath = $"{Path.GetDirectoryName(FilePath)}\\";
string rootPath; // We'll set this after user selects the folder

// Add this function to prompt for folder selection
string SelectExportFolder()
{
    using (var folderDialog = new FolderBrowserDialog())
    {
        folderDialog.Description = "Select folder to export decompiled files";
        folderDialog.RootFolder = Environment.SpecialFolder.Desktop;
        if (folderDialog.ShowDialog() == DialogResult.OK)
        {
            return folderDialog.SelectedPath;
        }
        return null;
    }
}

// yummy data loading (you need data.win to be loaded!)
EnsureDataLoaded();

// Prompt user to select export folder
rootPath = SelectExportFolder();
if (string.IsNullOrEmpty(rootPath))
{
    ScriptMessage("Export cancelled. No folder selected.");
    return;
}
rootPath = Path.Combine(rootPath, "") + Path.DirectorySeparatorChar;

// important
GMProject exportData;
TextureWorker worker = new TextureWorker();
List<string> errorList = new List<string>();
Dictionary<string, string> tpageAlign = new Dictionary<string, string>();

// gross
#region GM2022 Asset Structure

string GMS1Compatibility = System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(""));
public class ResourceBase
{
	public ResourceBase()
	{
		resourceType = base.GetType().Name;
	}

	[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
	public IdReference parent { get; set; }

	[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
	public Dictionary<string, Dictionary<string, string>> ConfigValues { get; set; }

	[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
	public string resourceVersion { get; set; } = "1.0";

	[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
	public string name { get; set; } = "";

	[JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.Ignore)]
	public List<string> tags { get; set; } = new List<string>();

	[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
	public string resourceType { get; set; }
}
public class IdReference
{
	public string name { get; set; }
	public string path { get; set; }
}
public class GMProject : ResourceBase
{
	public GMProject()
	{
		resourceVersion = "1.6";
	}

	public class ResourceWeight
	{
		public IdReference id { get; set; }
		public int order { get; set; }
	}
	public class GMProjectConfig
	{
		public string name { get; set; } = "Default";
		public List<GMProjectConfig> children { get; set; } = new List<GMProjectConfig>();
	}
	public class GMRoomOrderNode
	{
		public IdReference roomId { get; set; }
	}
	public class GMFolder : ResourceBase
	{
		public string folderPath { get; set; }
		public int order { get; set; }
	}

	public List<ResourceWeight> resources { get; set; } = new List<ResourceWeight>();
	public List<IdReference> Options { get; set; } = new List<IdReference>();
	public int defaultScriptType { get; set; } = 1; // None, GML, DND
	public bool isEcma { get; set; } = false;
	public GMProjectConfig configs { get; set; } = new GMProjectConfig();
	public List<GMRoomOrderNode> RoomOrderNodes { get; set; } = new List<GMRoomOrderNode>();
	public List<GMFolder> Folders { get; set; } = new List<GMFolder>();
	public List<GMAudioGroup> AudioGroups { get; set; } = new List<GMAudioGroup>();
	public List<GMTextureGroup> TextureGroups { get; set; } = new List<GMTextureGroup>();
	public List<GMIncludedFile> IncludedFiles { get; set; } = new List<GMIncludedFile>();
	public Dictionary<string, string> MetaData = new Dictionary<string, string>();
}
public class GMAudioGroup : ResourceBase
{
	public GMAudioGroup()
	{
		resourceVersion = "1.3";
		name = "audiogroup_default";
	}
	public long targets { get; set; } = -1L; // target platforms
}
public class GMTextureGroup : ResourceBase
{
	public GMTextureGroup()
	{
		resourceVersion = "1.3";
		name = "Default";
	}

	public bool isScaled { get; set; } = true;
	public string compressFormat { get; set; } = "bz2";
	public bool autocrop { get; set; } = true; // padded images in tpage if false
	public int border { get; set; } = 2;
	public int mipsToGenerate { get; set; }
	public IdReference groupParent { get; set; }
	public string loadType { get; set; } = "default"; // GM2022.9
	public string directory { get; set; } = ""; // GM2022.9

	public long targets { get; set; } = -1L; // target platforms
}
public class GMIncludedFile : ResourceBase
{
	public GMIncludedFile()
	{
		tags = null;
	}

	public long CopyToMask { get; set; } = -1L; // target platforms
	public string filePath { get; set; } = "datafiles";
}
public class GMMainOptions : ResourceBase
{
	public GMMainOptions()
	{
		resourceVersion = "1.4";
		name = "Main";
	}
	public string option_gameguid { get; set; } = Guid.NewGuid().ToString();
	public string option_gameid { get; set; } = "0";
	public int option_game_speed { get; set; } = 60;
	public bool option_mips_for_3d_textures { get; set; }
	public uint option_draw_colour { get; set; } = uint.MaxValue;
	public uint option_window_colour { get; set; } = 255U;
	public string option_steam_app_id { get; set; } = "0";
	public bool option_sci_usesci { get; set; } // source control
	public string option_author { get; set; } = "";
	public bool option_collision_compatibility { get; set; }
	public bool option_copy_on_write_enabled { get; set; }
	public string option_lastchanged { get; set; } = "";
	public bool option_spine_licence { get; set; }
	public string option_template_image { get; set; } = "${base_options_dir}/main/template_image.png";
	public string option_template_icon { get; set; } = "${base_options_dir}/main/template_icon.png";
	public string option_template_description { get; set; }
}
public class GMWindowsOptions : ResourceBase
{
	public GMWindowsOptions()
	{
		resourceVersion = "1.1";
		name = "Windows";
	}
	public string option_windows_display_name { get; set; } = "Created with GameMaker";
	public string option_windows_executable_name { get; set; } = "${project_name}.exe";
	public string option_windows_version { get; set; } = "1.0.0.0";
	public string option_windows_company_info { get; set; } = "YoYo Games Ltd";
	public string option_windows_product_info { get; set; } = "Created with GameMaker";
	public string option_windows_copyright_info { get; set; } = "";
	public string option_windows_description_info { get; set; } = "A GameMaker Game";
	public bool option_windows_display_cursor { get; set; } = true;
	public string option_windows_icon { get; set; } = "${base_options_dir}/windows/icons/icon.ico";
	public int option_windows_save_location { get; set; } = 0;
	public string option_windows_splash_screen { get; set; } = "${base_options_dir}/windows/splash/splash.png";
	public bool option_windows_use_splash { get; set; }
	public bool option_windows_start_fullscreen { get; set; }
	public bool option_windows_allow_fullscreen_switching { get; set; }
	public bool option_windows_interpolate_pixels { get; set; }
	public bool option_windows_vsync { get; set; }
	public bool option_windows_resize_window { get; set; }
	public bool option_windows_borderless { get; set; }
	public int option_windows_scale { get; set; }
	public bool option_windows_copy_exe_to_dest { get; set; }
	public int option_windows_sleep_margin { get; set; } = 10;
	public string option_windows_texture_page { get; set; } = "2048x2048";
	public string option_windows_installer_finished { get; set; } = "${base_options_dir}/windows/installer/finished.bmp";
	public string option_windows_installer_header { get; set; } = "${base_options_dir}/windows/installer/header.bmp";
	public string option_windows_license { get; set; } = "${base_options_dir}/windows/installer/license.txt";
	public string option_windows_nsis_file { get; set; } = "${base_options_dir}/windows/installer/nsis_script.nsi";
	public bool option_windows_enable_steam { get; set; }
	public bool option_windows_disable_sandbox { get; set; }
	public bool option_windows_steam_use_alternative_launcher { get; set; }
	public bool option_windows_use_x64 { get; set; } = true;
}
public class Point
{
	public float x { get; set; }
	public float y { get; set; }
}
public class Keyframe<T> : ResourceBase
{
	public Keyframe()
	{
		name = null;
		tags = null;
	}

	public Guid id { get; set; } = Guid.NewGuid();
	public float Key { get; set; }
	public float Length { get; set; }
	public bool Stretch { get; set; }
	public bool Disabled { get; set; }
	public bool IsCreationKey { get; set; }
	public Dictionary<string, T> Channels { get; set; } = new Dictionary<string, T>();

	public string resourceType
	{
		get
		{
			return base.GetType().Name.Replace("`1", "<" + typeof(T).Name + ">");
		}
	}

	//public string elementType { get { return typeof(T).Name; } }
}
public class KeyframeStore<T> : ResourceBase
{
	public KeyframeStore()
	{
		name = null;
		tags = null;
	}
	public string resourceType
	{
		get
		{
			return base.GetType().Name.Replace("`1", "<" + typeof(T).Name + ">");
		}
	}

	public List<Keyframe<T>> Keyframes { get; set; } = new List<Keyframe<T>>();
	//public string elementType { get { return typeof(T).Name; } }
}
public class AssetKeyframe : ResourceBase
{
	public IdReference Id { get; set; }
}
public class SpriteFrameKeyframe : AssetKeyframe
{
	
}
public class AssetSpriteKeyframe : AssetKeyframe
{
	
}
public class AssetInstanceKeyframe : AssetKeyframe
{

}
public class AssetTextKeyframe : AssetKeyframe
{
	public string Text { get; set; }
	public bool Wrap { get; set; }

	public int Alignment { get; set; }
	// 0: left, 1: centre, 2: right, 3: justify
	// vertical middle alignment adds 256, bottom alignment adds 512
}
public class AudioKeyframe : AssetKeyframe
{
	public int Mode { get; set; } // Single, Loop
}
public class AnimCurveKeyframe : ResourceBase
{
	public AnimCurveKeyframe()
	{
		name = null;
		tags = null;
	}

	public IdReference AnimCurveId { get; set; }
	public GMAnimCurve EmbeddedAnimCurve { get; set; }
}
public class RealKeyframe : AnimCurveKeyframe
{
	public float RealValue { get; set; }
}
public class ColourKeyframe : AnimCurveKeyframe
{
	public uint Colour { get; set; }
}
public class MessageEventKeyframe : ResourceBase
{
	public List<string> Events { get; set; }
}
public class MomentsEventKeyframe : ResourceBase
{
	public List<string> Events { get; set; }
}
public class GMSequence : ResourceBase
{
	public GMSequence()
	{
		resourceVersion = "1.4";
	}

	public List<GMBaseTrack> tracks { get; set; } = new List<GMBaseTrack>();
	public Point visibleRange { get; set; }
	public IdReference spriteId { get; set; }
	public int timeUnits { get; set; } = 1; // Time, Frames
	public int playback { get; set; } // None = -1, Normal, Loop, PingPong
	public float playbackSpeed { get; set; } = 60f;
	public int playbackSpeedType { get; set; } // FramesPerSecond, FramesPerGameFrame
	public bool autoRecord { get; set; } = true;
	public float volume { get; set; } = 1f;
	public float length { get; set; } = 60f;
	public KeyframeStore<MessageEventKeyframe> events { get; set; } = new KeyframeStore<MessageEventKeyframe>();
	public KeyframeStore<MomentsEventKeyframe> moments { get; set; } = new KeyframeStore<MomentsEventKeyframe>();
	public bool lockOrigin { get; set; }
	public bool showBackdrop { get; set; } = true;
	public bool showBackdropImage { get; set; }
	public string backdropImagePath { get; set; } = "";
	public float backdropImageOpacity { get; set; } = 0.5f;
	public int backdropWidth { get; set; } = 1366;
	public int backdropHeight { get; set; } = 768;
	public float backdropXOffset { get; set; }
	public float backdropYOffset { get; set; }
	public int xorigin { get; set; }
	public int yorigin { get; set; }
	public Dictionary<int, string> eventToFunction { get; set; } = new Dictionary<int, string>();
	public IdReference eventStubScript { get; set; }
}
public class GMBaseTrack : ResourceBase
{
	public uint trackColour { get; set; }
	public bool inheritsTrackColour { get; set; } = true;
	public int builtinName { get; set; }
	public int traits { get; set; }
	public int interpolation { get; set; } = 1; // None, Linear
	public List<GMBaseTrack> tracks { get; set; } = new List<GMBaseTrack>();
	public List<GMEvent> events { get; set; } = new List<GMEvent>();
	public bool isCreationTrack { get; set; }
	public List<string> modifiers { get; set; } = new List<string>();
}
public class GMSpriteFramesTrack : GMBaseTrack
{
	public IdReference spriteId { get; set; }
	public KeyframeStore<SpriteFrameKeyframe> keyframes { get; set; } = new KeyframeStore<SpriteFrameKeyframe>();
	public string name { get { return "frames"; } }
}
public class GMGraphicTrack : GMBaseTrack
{
	public KeyframeStore<AssetSpriteKeyframe> keyframes { get; set; } = new KeyframeStore<AssetSpriteKeyframe>();
}
public class GMInstanceTrack : GMBaseTrack
{
	public KeyframeStore<AssetInstanceKeyframe> keyframes { get; set; } = new KeyframeStore<AssetInstanceKeyframe>();
}
public class GMRealTrack : GMBaseTrack
{
	public KeyframeStore<RealKeyframe> keyframes { get; set; } = new KeyframeStore<RealKeyframe>();
}
public class GMGroupTrack : GMBaseTrack
{
	
}
public class GMAudioTrack : GMBaseTrack
{
	public KeyframeStore<AudioKeyframe> keyframes { get; set; } = new KeyframeStore<AudioKeyframe>();
}
public class GMClipMaskTrack : GMBaseTrack
{
	
}
public class GMClipMask_Mask : GMGroupTrack
{
	
}
public class GMClipMask_Subject : GMGroupTrack
{
	
}
public class GMColourTrack : GMBaseTrack
{
	public KeyframeStore<ColourKeyframe> keyframes { get; set; } = new KeyframeStore<ColourKeyframe>();
}
public class GMSprite : ResourceBase
{
	public class GMSpriteBitmap : ResourceBase
	{
		public IdReference FrameId { get; set; }
		public IdReference LayerId { get; set; }
	}
	public class GMSpriteFrame : ResourceBase
	{
		public GMSpriteFrame()
		{
			resourceVersion = "1.1";
		}

		// 2022.8 got rid of these, thank god for that

		//public GMSpriteBitmap compositeImage { get; set; } = new GMSpriteBitmap();
		//public List<GMSpriteBitmap> images { get; set; } = new List<GMSpriteBitmap>();
	}
	public class GMImageLayer : ResourceBase
	{
		public GMImageLayer()
		{
			name = Guid.NewGuid().ToString();
		}
		public bool visible { get; set; } = true;
		public bool isLocked { get; set; }
		public int blendMode { get; set; } // Normal, Add, Subtract, Multiply
		public float opacity { get; set; } = 100f;
		public string displayName { get; set; } = "default";
	}
	public class GMNineSliceData
	{
		public string resourceVersion { get { return "1.0"; } }
		public string loadedVersion { get; set; }
		public string resourceType { get { return base.GetType().Name; } }

		public int left { get; set; }
		public int top { get; set; }
		public int right { get; set; }
		public int bottom { get; set; }
		public uint[] guideColour { get; set; } = new uint[] { 0xFFFF00FF, 0xFFFF00FF, 0xFFFF00FF, 0xFFFF00FF }; // hard fuchsia
		public uint highlightColour { get; set; } = 1728023040U; // transparent light blue
		public int highlightStyle { get; set; } // inverted or normal
		public bool enabled { get; set; }
		public int[] tileMode { get; set; } = new int[5];
	}

	public bool HTile { get; set; }
	public bool VTile { get; set; }
	public bool For3D { get; set; } // separate texture page
	public bool DynamicTexturePage { get; set; } // 2022.9
	public bool preMultiplyAlpha { get; set; }
	public bool edgeFiltering { get; set; }
	public uint collisionTolerance { get; set; }
	public int bbox_left { get; set; }
	public int bbox_right { get; set; } = 63;
	public int bbox_top { get; set; }
	public int bbox_bottom { get; set; } = 63;
	public int origin { get; set; } = 9; // 9 is custom
	public int bboxMode { get; set; } = 2;
	public int collisionKind { get; set; } = 1; // 1 is rectangle
	public int type { get; set; } = 0; // Bitmap, SWF, Spine, Vector
	public float swfPrecision { get; set; } = 2.525f;
	public int width { get; set; } = 64;
	public int height { get; set; } = 64;
	public IdReference textureGroupId { get; set; }
	public List<uint> swatchColours { get; set; } // custom color palette in the image editor.
	public int gridX { get; set; }
	public int gridY { get; set; }
	public List<GMSpriteFrame> frames { get; set; } = new List<GMSpriteFrame>();
	public GMSequence sequence { get; set; }
	public List<GMImageLayer> layers { get; set; } = new List<GMImageLayer>();
	public GMNineSliceData nineSlice { get; set; }
}
public class GMEvent : ResourceBase
{
	public bool isDnD { get; set; }
	public int eventNum { get; set; }
	public int eventType { get; set; }
	public IdReference collisionObjectId { get; set; }
}
public class GMOverriddenProperty : ResourceBase
{
	public IdReference propertyId { get; set; } // variable name, parent object path
	public IdReference objectId { get; set; } // parent object name, parent object path
	public string value { get; set; }
}
public class GMObject : ResourceBase
{
	public class GMObjectProperty : ResourceBase
	{
		public int varType { get; set; } = 4; // Real, Integer, String, Boolean, Expression, Resource, List, Color
		public string value { get; set; } = "0";
		public bool rangeEnabled { get; set; } // affects reals and integers, replaces the input field with a slider in the IDE
		public float rangeMin { get; set; }
		public float rangeMax { get; set; } = 10f;
		public List<string> listItems { get; set; } = new List<string>(); // items in the List variable type
		public bool multiselect { get; set; } // for the List variable type
		public List<string> filters { get; set; } = new List<string>(); // for the Resource/Asset variable type
	}
	
	public IdReference spriteId { get; set; }
	public bool solid { get; set; }
	public bool visible { get; set; } = true;
	public bool managed { get; set; } = true; // ???
	public IdReference spriteMaskId { get; set; }
	public bool persistent { get; set; }
	public IdReference parentObjectId { get; set; }

	public bool physicsObject { get; set; }
	public bool physicsSensor { get; set; }
	public int physicsShape { get; set; } = 1;
	public int physicsGroup { get; set; } = 1;
	public float physicsDensity { get; set; } = 0.5f;
	public float physicsRestitution { get; set; } = 0.1f;
	public float physicsLinearDamping { get; set; } = 0.1f;
	public float physicsAngularDamping { get; set; } = 0.1f;
	public float physicsFriction { get; set; } = 0.2f;
	public bool physicsStartAwake { get; set; } = true;
	public bool physicsKinematic { get; set; }
	public List<Point> physicsShapePoints { get; set; } = new List<Point>();
	public List<GMEvent> eventList { get; set; } = new List<GMEvent>();
	public List<GMObjectProperty> properties { get; set; } = new List<GMObjectProperty>();
	public List<GMOverriddenProperty> overriddenProperties { get; set; } = new List<GMOverriddenProperty>();
}
public class GMRoom : ResourceBase
{
	public class GMRView
	{
		public bool inherit { get; set; }
		public bool visible { get; set; }
		public int xview { get; set; } = 0;
		public int yview { get; set; } = 0;
		public int wview { get; set; } = 1366;
		public int hview { get; set; } = 768;
		public int xport { get; set; } = 0;
		public int yport { get; set; } = 0;
		public int wport { get; set; } = 1366;
		public int hport { get; set; } = 768;
		public uint hborder { get; set; } = 32;
		public uint vborder { get; set; } = 32;
		public int hspeed { get; set; } = -1;
		public int vspeed { get; set; } = -1;
		public IdReference objectId { get; set; } = null;
	}
	public class GMRLayer : ResourceBase
	{
		public class GMEffectProp
		{
			public int type { get; set; }
			public string name { get; set; }
			public string value { get; set; }
		}

		// every layer
		public bool visible { get; set; } = true;
		public int depth { get; set; } = 0;
		public bool userdefinedDepth { get; set; } = false;
		public bool inheritLayerDepth { get; set; } = false;
		public bool inheritLayerSettings { get; set; } = false;
		public int gridX { get; set; } = 32;
		public int gridY { get; set; } = 32;
		public List<GMRLayer> layers { get; set; } = new List<GMRLayer>(); // sub-layers I assume
		public bool hierarchyFrozen { get; set; } = false;
		public bool effectEnabled { get; set; } = true;
		public string effectType { get; set; } = null;
		public List<GMEffectProp> properties { get; set; } = new List<GMEffectProp>();
	}
	public class GMRInstanceLayer : GMRLayer
	{
		public class GMRInstance : ResourceBase
		{
			public List<GMOverriddenProperty> properties { get; set; } = new List<GMOverriddenProperty>();
			public bool isDnd { get; set; } = false;
			public IdReference objectId { get; set; }
			public bool inheritCode { get; set; } = false;
			public bool hasCreationCode { get; set; } = false;
			public uint colour { get; set; } = 0xFFFFFFFF;
			public float rotation { get; set; } = 0.0f;
			public float scaleX { get; set; } = 1.0f;
			public float scaleY { get; set; } = 1.0f;
			public int imageIndex { get; set; } = 0;
			public float imageSpeed { get; set; } = 1.0f;
			public IdReference inheritedItemId { get; set; } = null;
			public bool frozen { get; set; } = false;
			public bool ignore { get; set; } = false;
			public bool inheritItemSettings { get; set; } = false;
			public int x { get; set; } = 0;
			public int y { get; set; } = 0;
		}
		public List<GMRInstance> instances { get; set; } = new List<GMRInstance>();
	}
	public class GMRTileLayer : GMRLayer
	{
		public GMRTileLayer()
		{
			resourceVersion = "1.1";
		}

		public IdReference tilesetId { get; set; }
		public int x { get; set; } = 0;
		public int y { get; set; } = 0;
		public TileMap tiles { get; set; } = new TileMap(0, 0);
	}
	public class GMRBackgroundLayer : GMRLayer
	{
		public IdReference spriteId { get; set; }

		public uint colour { get; set; } = 0xFFFFFFFF;
		public int x { get; set; } = 0;
		public int y { get; set; } = 0;
		public bool htiled { get; set; } = false;
		public bool vtiled { get; set; } = false;
		public float hspeed { get; set; } = 0.0f;
		public float vspeed { get; set; } = 0.0f;
		public bool stretch { get; set; } = false;
		public float animationFPS { get; set; } = 15.0f;
		public int animationSpeedType { get; set; } = 0;
		public bool userdefinedAnimFPS { get; set; } = false;
	}
	public class GMRAssetLayer : GMRLayer
	{
		public class GMRAsset : ResourceBase
		{
			public IdReference spriteId { get; set; } = null;
			public uint colour { get; set; } = 0xFFFFFFFF;
			public IdReference inheritedItemId { get; set; } = null;
			public bool frozen { get; set; } = false;
			public bool ignore { get; set; } = false;
			public bool inheritItemSettings { get; set; } = false;
			public float x { get; set; } = 0.0f;
			public float y { get; set; } = 0.0f;
		}
		public class GMRSpriteGraphic : GMRAsset
		{
			public float headPosition { get; set; } = 0.0f; // frame
			public float rotation { get; set; } = 0.0f;
			public float scaleX { get; set; } = 1.0f;
			public float scaleY { get; set; } = 1.0f;
			public float animationSpeed { get; set; } = 1.0f;
		}
		public class GMRGraphic : GMRAsset
		{
			public uint w { get; set; }
			public uint h { get; set; }
			public uint u0 { get; set; }
			public uint v0 { get; set; }
			public uint u1 { get; set; }
			public uint v1 { get; set; }
		}
		public List<GMRAsset> assets { get; set; } = new List<GMRAsset>();
	}
	public class GMREffectLayer : GMRLayer
	{

	}

	public bool isDnd { get; set; } = false;
	public float volume { get; set; } = 1.0f; // potentially unused?
	public IdReference parentRoom { get; set; } = null;

	public List<GMRView> views { get; set; } = Enumerable.Repeat(new GMRView(), 8).ToList(); // generate 8 default views
	public List<GMRLayer> layers { get; set; } = new List<GMRLayer>();

	public bool inheritLayers { get; set; } = false;
	public string creationCodeFile { get; set; } = null;
	public bool inheritCode { get; set; } = false;
	public List<IdReference> instanceCreationOrder { get; set; } = new List<IdReference>();
	public bool inheritCreationOrder { get; set; } = false;
	public IdReference sequenceId { get; set; } = null;

	// room settings
	public class GMRoomSettings
	{
		public bool inheritRoomSettings { get; set; } = false;
		public int Width { get; set; } = 960;
		public int Height { get; set; } = 540;
		public bool persistent { get; set; } = false;
	}
	public GMRoomSettings roomSettings { get; set; } = new GMRoomSettings();

	// view settings
	public class GMRViewSettings
	{
		public bool inheritViewSettings { get; set; } = false;
		public bool enableViews { get; set; } = true;
		public bool clearViewBackground { get; set; } = true;
		public bool clearDisplayBuffer { get; set; } = true;
	}
	public GMRViewSettings viewSettings { get; set; } = new GMRViewSettings();

	// physics world settings
	public class GMRPhysicsSettings
	{
		public bool inheritPhysicsSettings { get; set; } = false;
		public bool PhysicsWorld { get; set; } = false;
		public float PhysicsWorldGravityX { get; set; } = 0.0f;
		public float PhysicsWorldGravityY { get; set; } = 10.0f;
		public float PhysicsWorldPixToMetres { get; set; } = 0.1f;
	}
	public GMRPhysicsSettings physicsSettings { get; set; } = new GMRPhysicsSettings();
}
public class TileMap
{
	public TileMap(int _width, int _height)
	{
		SerialiseWidth = _width;
		SerialiseHeight = _height;

		// no idea how the compressed data works, so
		TileDataFormat = 0; // use old format
		TileSerialiseData = new List<uint>();
	}

	public int TileDataFormat { get; set; } // 0 is old, 1 is new
	public int SerialiseWidth { get; set; }
	public int SerialiseHeight { get; set; }

	[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)] // 2022.8
	public List<uint> TileSerialiseData { get; set; }

	// 2022.8 introduced encoded tile data
	[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
	public List<int> TileCompressedData { get; set; }
}
public class GMTileSet : ResourceBase
{
	public class GMAutoTileSet : ResourceBase
	{
		public List<uint> tiles { get; set; } = new List<uint>();
		public bool closed_edge { get; set; }
	}
	public class GMTileAnimation : ResourceBase
	{
		public List<uint> frames { get; set; } = new List<uint>();
	}
	public class TileAnimation
	{
		public List<uint> FrameData { get; set; } = new List<uint>();
		public int SerialiseFrameCount { get; set; }
	}

	public IdReference spriteId { get; set; }
	public int tileWidth { get; set; } = 16;
	public int tileHeight { get; set; } = 16;
	public int tilexoff { get; set; }
	public int tileyoff { get; set; }
	public int tilehsep { get; set; }
	public int tilevsep { get; set; }
	public bool spriteNoExport { get; set; } = true;
	public IdReference textureGroupId { get; set; }
	public int out_tilehborder { get; set; } = 2;
	public int out_tilevborder { get; set; } = 2;
	public int out_columns { get; set; }
	public int tile_count { get; set; }
	public List<GMAutoTileSet> autoTileSets { get; set; } = new List<GMAutoTileSet>();
	public List<GMTileAnimation> tileAnimationFrames { get; set; } = new List<GMTileAnimation>();
	public float tileAnimationSpeed { get; set; } = 15f; // 1000000 / ms
	public TileAnimation tileAnimation { get; set; } = new TileAnimation();
	public TileMap macroPageTiles { get; set; } = new TileMap(0, 0); // tileset brush, ide only.
}
public class GMScript : ResourceBase
{
	public bool isDnD { get; set; }
	public bool isCompatibility { get; set; }
}
public class GMSound : ResourceBase
{
	public int conversionMode { get; set; }
	public int compression { get; set; }
	public float volume { get; set; } = 1f;
	public bool preload { get; set; } // "Preload... or not..."
	public int bitRate { get; set; } = 128;
	public int sampleRate { get; set; } = 44100;
	public int type { get; set; }
	public int bitDepth { get; set; } = 1;
	public IdReference audioGroupId { get; set; }
	public string soundFile { get; set; } = "";
	public float duration { get; set; }
}
public class GMShader : ResourceBase
{
	public int type { get; set; } = 1; // None, GLSLES, GLSL, HLSL11, PSSL
}
public class GMFont : ResourceBase
{
	public class Glyph
	{
		public int x { get; set; }
		public int y { get; set; }
		public int w { get; set; }
		public int h { get; set; }
		public int character { get; set; }
		public int shift { get; set; }
		public int offset { get; set; }
	}
	public class KerningPair
	{
		public int first { get; set; }
		public int second { get; set; }
		public int amount { get; set; }
	}
	public class FontRange
	{
		public FontRange(int _lower, int _upper)
		{
			lower = _lower;
			upper = _upper;
		}

		public int lower { get; set; }
		public int upper { get; set; }
	}

	public bool includeTTF { get; set; }
	public float size { get; set; }
	public string sampleText { get; set; } = "abcdef ABCDEF\n0123456789 .,<>\"'&!?\nthe quick brown fox jumps over the lazy dog\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\nDefault character: ▯ (9647)";
	public int hinting { get; set; } // Normal, Mono, Light
	public int glyphOperations { get; set; } // Default, DisableHinting, DisableAutoHinting, PreferAutoHinting = 4, Warping = 8, NoScale = 16
	public int interpreter { get; set; } // TrueType40, TrueType35
	public int pointRounding { get; set; } // Floor, Round, Ceil
	public int applyKerning { get; set; } // On, Off
	public string fontName { get; set; } = "";
	public string styleName { get; set; } = "Regular";
	public bool bold { get; set; }
	public bool italic { get; set; }
	public int charset { get; set; }
	public int AntiAlias { get; set; } = 1; // Mono, Normal
	public int first { get; set; }
	public int last { get; set; }
	public string TTFName { get; set; } = "";
	public IdReference textureGroupId { get; set; }
	public int ascenderOffset { get; set; }
	public int ascender { get; set; }
	public Dictionary<int, Glyph> glyphs { get; set; } = new Dictionary<int, Glyph>();
	public List<KerningPair> kerningPairs { get; set; } = new List<KerningPair>();
	public List<FontRange> ranges { get; set; } = new List<FontRange>();
	public bool regenerateBitmap { get; set; }
	public bool canGenerateBitmap { get; set; } = true;
	public bool maintainGms1Font { get; set; }
}
public class GMPath : ResourceBase
{
	public class PathPoint : Point
	{
		public float speed { get; set; }
	}

	public int kind { get; set; }
	public bool closed { get; set; }
	public int precision { get; set; } = 4;
	public List<PathPoint> points { get; set; } = new List<PathPoint>();
}
public class GMMoment : ResourceBase
{
	public int moment { get; set; }
	public GMEvent evnt { get; set; }
}
public class GMTimeline : ResourceBase
{
	public List<GMMoment> momentList { get; set; } = new List<GMMoment>();
}
public class GMAnimCurve : ResourceBase
{
	public GMAnimCurve()
	{
		resourceVersion = "1.2";
	}

	public int function { get; set; } // Linear, CentripetalCatmullRom, Bezier2D
	public List<GMAnimCurveChannel> channels { get; set; } = new List<GMAnimCurveChannel>();
}
public class GMAnimCurveChannel : ResourceBase
{
	public uint colour { get; set; }
	public bool visible { get; set; } = true;
	public List<CurvePoint> points { get; set; } = new List<CurvePoint>();
}
public class CurvePoint : Point
{
	public float th0 { get; set; }
	public float th1 { get; set; }
	public float tv0 { get; set; }
	public float tv1 { get; set; }
}
public class GMExtension : ResourceBase
{
	public GMExtension()
	{
		resourceVersion = "1.2";
	}

	public string optionsFile { get; set; } = "options.json";
	public List<GMExtensionOption> options { get; set; } = new List<GMExtensionOption>();
	public bool exportToGame { get; set; } = true;
	public long supportedTargets { get; set; } = -1L;
	public string extensionVersion { get; set; } = "";
	public string packageId { get; set; } = "";
	public string productId { get; set; } = "";
	public string author { get; set; } = "";
	public DateTime date { get; set; } = DateTime.Now;
	public string license { get; set; } = "";
	public string description { get; set; } = "";
	public string helpfile { get; set; } = "";
	public bool iosProps { get; set; }
	public bool tvosProps { get; set; }
	public bool androidProps { get; set; }
	public string installdir { get; set; } = "";
	public List<GMExtensionFile> files { get; set; } = new List<GMExtensionFile>();
	public string classname { get; set; } = "";
	public string tvosclassname { get; set; }
	public string tvosdelegatename { get; set; }
	public string iosdelegatename { get; set; } = "";
	public string androidclassname { get; set; } = "";
	public string sourcedir { get; set; } = "";
	public string androidsourcedir { get; set; } = "";
	public string macsourcedir { get; set; } = "";
	public string maccompilerflags { get; set; } = "";
	public string tvosmaccompilerflags { get; set; } = "";
	public string maclinkerflags { get; set; } = "";
	public string tvosmaclinkerflags { get; set; } = "";
	public string iosplistinject { get; set; }
	public string tvosplistinject { get; set; }
	public string androidinject { get; set; }
	public string androidmanifestinject { get; set; }
	public string androidactivityinject { get; set; }
	public string gradleinject { get; set; }
	public string androidcodeinjection { get; set; } = "";
	public bool hasConvertedCodeInjection { get; set; }
	public string ioscodeinjection { get; set; } = "";
	public string tvoscodeinjection { get; set; } = "";
	public List<GMExtensionFrameworkEntry> iosSystemFrameworkEntries { get; set; } = new List<GMExtensionFrameworkEntry>();
	public List<GMExtensionFrameworkEntry> tvosSystemFrameworkEntries { get; set; } = new List<GMExtensionFrameworkEntry>();
	public List<GMExtensionFrameworkEntry> iosThirdPartyFrameworkEntries { get; set; } = new List<GMExtensionFrameworkEntry>();
	public List<GMExtensionFrameworkEntry> tvosThirdPartyFrameworkEntries { get; set; } = new List<GMExtensionFrameworkEntry>();
	public List<string> IncludedResources { get; set; } = new List<string>();
	public List<string> androidPermissions { get; set; } = new List<string>();
	public long copyToTargets { get; set; } = -1L;
	public string iosCocoaPods { get; set; } = "";
	public string tvosCocoaPods { get; set; } = "";
	public string iosCocoaPodDependencies { get; set; } = "";
	public string tvosCocoaPodDependencies { get; set; } = "";
}
public class GMExtensionOption : ResourceBase
{
	public IdReference extensionId { get; set; }
	public Guid guid { get; set; } = Guid.NewGuid();
	public string displayName { get; set; } = "";
	public string description { get; set; } = "";
	public string defaultValue { get; set; } = "0";
	public bool exportToINI { get; set; }
	public int optType { get; set; } = 1; // Boolean, Number, String, FilePath, FolderPath, Section
}
public class GMExtensionFile : ResourceBase
{
	public string filename { get; set; } = "";
	public string origname { get; set; } = "";
	public string init { get; set; } = "";
	public string final { get; set; } = "";
	public int kind { get; set; }
	public bool uncompress { get; set; }
	public List<GMExtensionFunction> functions { get; set; } = new List<GMExtensionFunction>();
	public List<GMExtensionConstant> constants { get; set; } = new List<GMExtensionConstant>();
	public List<GMProxyFile> ProxyFiles { get; set; } = new List<GMProxyFile>();
	public long copyToTargets { get; set; } = -1L;
	public List<IdReference> order { get; set; } = new List<IdReference>();
}
public class GMExtensionFunction : ResourceBase
{
	public string externalName { get; set; } = "";
	public int kind { get; set; }
	public string help { get; set; } = "";
	public bool hidden { get; set; }
	public int returnType { get; set; }
	public int argCount { get; set; }
	public List<int> args { get; set; } = new List<int>();
}
public class GMExtensionConstant : ResourceBase
{
	public string value { get; set; } = "";
	public bool hidden { get; set; }
}
public class GMProxyFile : ResourceBase
{
	public long TargetMask { get; set; }
}
public class GMExtensionFrameworkEntry : ResourceBase
{
	public bool weakReference { get; set; }
	public int embed { get; set; }
}
public class GMNotes : ResourceBase
{
	// nothing lol
}

#endregion
#region GM2022 Asset Dumpers

void AddResource(IdReference resource)
{
	var res = new GMProject.ResourceWeight
	{
		id = resource,
		order = exportData.resources.Count
	};

	if (!exportData.resources.Any(i => i.id.name == res.id.name))
		exportData.resources.Add(res);
}
void DumpOptions()
{
	string optionsPath = "options/";
	string mainOptionsPath = optionsPath + "main/";
	Directory.CreateDirectory(rootPath + mainOptionsPath);

	// make main options
	var exportMainOptions = new GMMainOptions();
	exportMainOptions.option_gameid = Data.GeneralInfo.GameID.ToString();
	exportMainOptions.option_game_speed = (int)Data.GeneralInfo.GMS2FPS;
	exportMainOptions.option_window_colour = (uint)Data.Options.WindowColor;
	exportMainOptions.option_steam_app_id = Data.GeneralInfo.SteamAppID.ToString();
	//exportMainOptions.option_collision_compatibility = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.FastCollisionCompatibility) || !Data.GMS2022_1);
	//exportMainOptions.option_copy_on_write_enabled = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.WriteErrors) || !Data.GMS2022_2);
							// unsure ^

	// make windows options
	string windowsOptionsPath = optionsPath + "windows/";
	Directory.CreateDirectory(rootPath + windowsOptionsPath);

	var exportWindowsOptions = new GMWindowsOptions();
	exportWindowsOptions.option_windows_display_name = Data.GeneralInfo.DisplayName.Content;
	//exportWindowsOptions.option_windows_copyright_info = "Decompiler script by REDACTED";

	exportWindowsOptions.option_windows_start_fullscreen = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.FullScreen));
	exportWindowsOptions.option_windows_interpolate_pixels = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.InterpolatePixels));
	exportWindowsOptions.option_windows_borderless = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.NoBorder));
	exportWindowsOptions.option_windows_display_cursor = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.ShowCursor));
	exportWindowsOptions.option_windows_resize_window = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.Sizeable));
	exportWindowsOptions.option_windows_disable_sandbox = (Data.Options.Info.HasFlag(UndertaleOptions.OptionsFlags.DisableSandbox));
	exportWindowsOptions.option_windows_vsync = (Data.GeneralInfo.Info.HasFlag(UndertaleGeneralInfo.InfoFlags.SyncVertex1));
	exportWindowsOptions.option_windows_allow_fullscreen_switching = (Data.GeneralInfo.Info.HasFlag(UndertaleGeneralInfo.InfoFlags.ScreenKey));
	exportWindowsOptions.option_windows_enable_steam = (Data.GeneralInfo.Info.HasFlag(UndertaleGeneralInfo.InfoFlags.SteamEnabled));
	if (!Data.GeneralInfo.Info.HasFlag(UndertaleGeneralInfo.InfoFlags.Scale))
		exportWindowsOptions.option_windows_scale = 1;
	if (Data.GeneralInfo.Info.HasFlag(UndertaleGeneralInfo.InfoFlags.LocalDataEnabled))
		exportWindowsOptions.option_windows_save_location = 1;

	// use runner
	string runnerExePath = dataPath + Data.GeneralInfo.FileName.Content + ".exe";
	if (!File.Exists(runnerExePath))
	{
		foreach (var f in Directory.GetFiles(dataPath, "*.exe", SearchOption.TopDirectoryOnly))
		{
			var lastLine = File.ReadLines(f).Last();
			if (lastLine.Contains("YoYoGames.GameMaker.Runner"))
				runnerExePath = f;
		}
	}
	if (File.Exists(runnerExePath))
	{
		// product info
		var vinfo = FileVersionInfo.GetVersionInfo(runnerExePath);
		exportWindowsOptions.option_windows_product_info = vinfo.ProductName;
		exportWindowsOptions.option_windows_company_info = vinfo.CompanyName;
		exportWindowsOptions.option_windows_description_info = vinfo.FileDescription;
		exportWindowsOptions.option_windows_copyright_info = vinfo.LegalCopyright;
		exportWindowsOptions.option_windows_version = vinfo.FileVersion;

		// icon
		var iconExport = getIcon(runnerExePath);
		if (iconExport != null)
		{
			string iconPath = rootPath + windowsOptionsPath + "icons/";
			exportWindowsOptions.option_windows_icon = "icons/icon.ico";

			Directory.CreateDirectory(iconPath);
			using (var stream = new FileStream($"{iconPath}icon.ico", FileMode.Create))
				iconExport.Save(stream);

			using (var stream = new FileStream($"{iconPath}readme.txt", FileMode.Create))
			{
				byte[] info = Encoding.Default.GetBytes("yes I know the icon is bad please");
				stream.Write(info, 0, info.Length);
			}
		}
	}

	// splash
	string splashPath = dataPath + "splash.png";
	if (File.Exists(splashPath))
	{
		Directory.CreateDirectory(rootPath + windowsOptionsPath + "splash");
		File.Copy(splashPath, rootPath + windowsOptionsPath + "splash/splash.png", true);

		exportWindowsOptions.option_windows_splash_screen = "splash/splash.png";
		exportWindowsOptions.option_windows_use_splash = true;
	}

	// constants
	foreach (var i in Data.Options.Constants)
	{
		if (i.Name.Content == "@@DrawColour")
			exportMainOptions.option_draw_colour = UInt32.Parse(i.Value.Content);
		if (i.Name.Content == "@@SleepMargin")
			exportWindowsOptions.option_windows_sleep_margin = Int32.Parse(i.Value.Content);
	}

	// export and add to data
	doJson(exportMainOptions, mainOptionsPath + "options_main.yy");
	doJson(exportWindowsOptions, windowsOptionsPath + "options_windows.yy");
	exportData.Options.Add(new IdReference { name = exportMainOptions.name, path = mainOptionsPath + "options_main.yy" });
	exportData.Options.Add(new IdReference { name = exportWindowsOptions.name, path = windowsOptionsPath + "options_windows.yy" });
}

void DumpSprite(UndertaleSprite sprite)
{
	string spritePath = "sprites/" + sprite.Name.Content + "/";
	string exportedPath = $"sprites/{sprite.Name.Content}/{sprite.Name.Content}.yy";

	// skip over sprite if it was already exported
	if (File.Exists(rootPath + exportedPath))
	{
		AddResource(new IdReference
		{
			name = sprite.Name.Content,
			path = exportedPath
		});
		UpdateProgress();
		return;
	}
	Directory.CreateDirectory(rootPath + spritePath);

	var exportedSprite = new GMSprite
	{
		name = sprite.Name.Content,
		width = Math.Max((int)sprite.Width, 1),
		height = Math.Max((int)sprite.Height, 1),
		bbox_left = sprite.MarginLeft,
		bbox_right = sprite.MarginRight,
		bbox_bottom = sprite.MarginBottom,
		bbox_top = sprite.MarginTop,
		preMultiplyAlpha = sprite.Transparent,
		edgeFiltering = sprite.Smooth,
		bboxMode = (int)sprite.BBoxMode,
		type = (int)sprite.SSpriteType,
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, sprite);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedSprite.tags.Add(tag.Content);
	}

	// figure out collision mask
	if (sprite.CollisionMasks.Count > 1)
		exportedSprite.collisionKind = 4; // precise per frame
	else
	{
		switch ((int)sprite.SepMasks)
		{
			case 0: exportedSprite.collisionKind = 1; break; // rectangle
			case 1: exportedSprite.collisionKind = 0; break; // precise
			case 2: exportedSprite.collisionKind = 5; break; // rotated rectangle

			// there are more but modtool is too retarded to figure it out and so am I
		}
	}

	// figure out the sprite origin setting
	int ox = sprite.OriginX, oy = sprite.OriginY, ow = (int)sprite.Width, oh = (int)sprite.Height, og = 9;
	if (ox == 0)
		og = 0;
	else if (ox == ow / 2)
		og = 1;
	else if (ox == ow)
		og = 2;

	if (og != 9)
	{
		if (oy == oh / 2)
			og += 3;
		else if (oy == oh)
			og += 6;
		else if (oy != 0)
			og = 9;
	}
	exportedSprite.origin = og;

	// folder sprite is in
	exportedSprite.parent = new IdReference
	{
		name = "Sprites",
		path = "folders/Sprites.yy"
	};
	if (_APND.Checked) exportedSprite.parent = APNDREF;

	// animation sequence
	exportedSprite.sequence = new GMSequence
	{
		spriteId = new IdReference
		{
			name = exportedSprite.name,
			path = exportedPath
		},
		playbackSpeed = sprite.GMS2PlaybackSpeed,
		playbackSpeedType = (int)sprite.GMS2PlaybackSpeedType,
		length = (float)sprite.Textures.Count,
		xorigin = sprite.OriginX,
		yorigin = sprite.OriginY,
		name = exportedSprite.name,

		/*
		parent = new IdReference
		{
			name = exportedSprite.name,
			path = exportedPath
		}
		*/
};

	// nine slice
	if (sprite.V3NineSlice != null)
	{
		exportedSprite.nineSlice = new GMSprite.GMNineSliceData
		{
			left = sprite.V3NineSlice.Left,
			top = sprite.V3NineSlice.Top,
			right = sprite.V3NineSlice.Right,
			bottom = sprite.V3NineSlice.Bottom,
			enabled = sprite.V3NineSlice.Enabled,
			tileMode = Array.ConvertAll(sprite.V3NineSlice.TileModes, item => (int)item),
		};
	}

	string tgrp = "Default";
	if (sprite.Textures.Count > 0)
	{
		// add the default layer
		string layerGuid = Guid.NewGuid().ToString();
		exportedSprite.layers.Add(new GMSprite.GMImageLayer { name = layerGuid });

		// export every frame
		var baseTrack = new GMSpriteFramesTrack();
		for (var j = 0; j < sprite.Textures.Count; j++)
		{
			var frame = sprite.Textures[j];

			// texture group
			if (frame.Texture != null)
			{
				if (tpageAlign.ContainsKey(frame.Texture.TexturePage.Name.Content))
					tgrp = tpageAlign[frame.Texture.TexturePage.Name.Content];
				else if (tpageAlign.ContainsKey(exportedSprite.name))
					tgrp = tpageAlign[exportedSprite.name];
			}

			// make guids and stuff
			string compositeGuid = Guid.NewGuid().ToString();
			string layersPath = rootPath + spritePath + "layers/" + compositeGuid + "/";
			Directory.CreateDirectory(layersPath);

			// extract images
			if (frame.Texture != null)
			{
				Bitmap img;
				try
				{
					// fetch bitmap image
					img = worker.GetTextureFor(frame.Texture, compositeGuid + ".png", true);
				}
				catch
				{
					// give up immediately and make an empty image
					img = new Bitmap(exportedSprite.width, exportedSprite.height);
				}
				TextureWorker.SaveImageToFile(rootPath + spritePath + compositeGuid + ".png", img, false);
				TextureWorker.SaveImageToFile(layersPath + layerGuid + ".png", img);
			}

			// add to frames
			var spriteFrame = new GMSprite.GMSpriteFrame();
			spriteFrame.name = compositeGuid;

			// pre-2022.8
			/*
			spriteFrame.compositeImage.FrameId = new IdReference
			{
				name = compositeGuid,
				path = exportedPath
			};
			spriteFrame.parent = new IdReference
			{
				name = exportedSprite.name,
				path = exportedPath
			};

			var spriteFrame2 = new GMSprite.GMSpriteBitmap();
			spriteFrame2.FrameId = new IdReference
			{
				name = compositeGuid,
				path = exportedPath
			};
			spriteFrame2.LayerId = new IdReference
			{
				name = layerGuid,
				path = exportedPath
			};

			spriteFrame.images.Add(spriteFrame2);
			*/

			exportedSprite.frames.Add(spriteFrame);

			// add to sequence
			var channelId = new IdReference
			{
				name = compositeGuid,
				path = exportedPath
			};
			var keyframe = new Keyframe<SpriteFrameKeyframe>
			{
				Key = (float)j,
				Length = 1.0f,
			};
			keyframe.Channels.Add("0", new SpriteFrameKeyframe
			{
				Id = channelId
			});
			baseTrack.keyframes.Keyframes.Add(keyframe);
		}
		exportedSprite.sequence.tracks.Add(baseTrack);
	}

	// texture page
	if (tgrp.StartsWith("__YY__") && tgrp.Contains("_YYG_AUTO_GEN_TEX_GROUP_NAME_"))
		exportedSprite.For3D = true;
	else
	{
		exportedSprite.textureGroupId = new IdReference
		{
			name = tgrp,
			path = $"texturegroups/{tgrp}"
		};
	}

	// finish
	doJson(exportedSprite, spritePath + $"{exportedSprite.name}.yy");
	AddResource(new IdReference
	{
		name = exportedSprite.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpObject(UndertaleGameObject obj)
{
	var exportedObject = new GMObject
	{
		name = obj.Name.Content,
		visible = obj.Visible,
		solid = obj.Solid,
		persistent = obj.Persistent,
		physicsObject = obj.UsesPhysics,
		physicsSensor = obj.IsSensor,
		physicsShape = (int)obj.CollisionShape,
		physicsGroup = (int)obj.Group,
		physicsDensity = obj.Density,
		physicsRestitution = obj.Restitution,
		physicsLinearDamping = obj.LinearDamping,
		physicsAngularDamping = obj.AngularDamping,
		physicsFriction = obj.Friction,
		physicsStartAwake = obj.Awake,
		physicsKinematic = obj.Kinematic,
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, obj);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedObject.tags.Add(tag.Content);
	}

	// folder
	exportedObject.parent = new IdReference
	{
		name = "Objects",
		path = "folders/Objects.yy"
	};
	if (_APND.Checked) exportedObject.parent = APNDREF;

	// port sprite, mask and parent
	if (obj.Sprite != null)
	{
		string spriteName = obj.Sprite.Name.Content;
		exportedObject.spriteId = new IdReference
		{
			name = spriteName,
			path = $"sprites/{spriteName}/{spriteName}.yy"
		};
	}
	if (obj.TextureMaskId != null)
	{
		string maskName = obj.TextureMaskId.Name.Content;
		exportedObject.spriteMaskId = new IdReference
		{
			name = maskName,
			path = $"sprites/{maskName}/{maskName}.yy"
		};
	}
	if (obj.ParentId != null)
	{
		string parentName = obj.ParentId.Name.Content;
		exportedObject.parentObjectId = new IdReference
		{
			name = parentName,
			path = $"objects/{parentName}/{parentName}.yy"
		};
	}

	// port physics vertices
	foreach (var i in obj.PhysicsVertices)
	{
		exportedObject.physicsShapePoints.Add(new Point
		{
			x = i.X,
			y = i.Y
		});
	}

	// paths
	string objectPath = "objects/" + obj.Name.Content + "/";
	string exportedPath = $"{objectPath}{obj.Name.Content}.yy";
	Directory.CreateDirectory(rootPath + objectPath);

	// port events
	for (var i = 0; i < obj.Events.Count; i++)
	{
		foreach (var j in obj.Events[i])
		{
			if (i == 14)
			{
				// reverse the pre create event
				string code = decompileCode(j.Actions[0].CodeId);
				code.Replace("event_inherited()\n", "");
				
				var varDefs = code.Split("\n");
				foreach (var match in varDefs)
				{
					var find = match.Split(" = ");
					if (find.Length >= 2)
					{
						var varName = "";
						var varValue = "";
						
						foreach (var f in find)
						{
							if (varName == "")
								varName = f.Replace("self.", "");
							else
								varValue += f;
						}
						
						exportedObject.properties.Add(new GMObject.GMObjectProperty
						{
							name = varName,
							value = varValue
						});
					}
				}
			}
			else
			{
				string codeName = Enum.GetName(typeof(EventType), i);
				var evnt = new GMEvent
				{
					eventType = i,
					eventNum = (int)j.EventSubtype,
				};

				// collision event
				if (i == 4)
				{
					var colobj = Data.GameObjects[evnt.eventNum];
					evnt.eventNum = 0;

					if (colobj != null)
					{
						evnt.collisionObjectId = new IdReference
						{
							name = colobj.Name.Content,
							path = $"objects/{colobj.Name.Content}/{colobj.Name.Content}.yy"
						};
						codeName += "_" + colobj.Name.Content;
					}
				}
				else
					codeName += "_" + evnt.eventNum;
				
				// code
				if (j.Actions.Count > 0)
				{
					string code = "";
					if (j.Actions[0].CodeId == null)
					{
						// if yyc, write subfunctions
						foreach (var y in Data.Scripts)
						{
							var n = y.Name.Content;
							if (n.EndsWith($"_gml_Object_{obj.Name.Content}_{codeName}"))
							{
								var funcname = n.Substring("gml_Script_".Length, n.LastIndexOf("_gml_Object_") - "gml_Script_".Length);
								code += $"function {funcname}()\n{{\n	\n}}\n\n";
							}
						}
					}
					else
					{	
						try
						{
							code = decompileCode(j.Actions[0].CodeId);
						}
						catch (Exception e)
						{
							if (!skipErrors)
								ScriptError("A " + codeName + " event in " + exportedObject.name + " failed to decompile!\n\n" + e.ToString());
							else
								errorList.Add($"{exportedObject.name} {codeName} - {e.Message}");
							code = "/* (decompilation failed.) */\n";
						}
					}
					File.WriteAllText(rootPath + objectPath + codeName + ".gml", code);
				}
				exportedObject.eventList.Add(evnt);
			}
		}
	}

	// finish
	doJson(exportedObject, objectPath + $"{exportedObject.name}.yy");
	AddResource(new IdReference
	{
		name = exportedObject.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpRoom(UndertaleRoom room)
{
	var exportedRoom = new GMRoom { name = room.Name.Content };

	exportedRoom.roomSettings.Width = (int)room.Width;
	exportedRoom.roomSettings.Height = (int)room.Height;
	exportedRoom.viewSettings.clearDisplayBuffer = !room.Flags.HasFlag(UndertaleRoom.RoomEntryFlags.ClearDisplayBuffer);
	exportedRoom.viewSettings.enableViews = room.Flags.HasFlag(UndertaleRoom.RoomEntryFlags.EnableViews);
	exportedRoom.viewSettings.clearViewBackground = room.Flags.HasFlag(UndertaleRoom.RoomEntryFlags.ShowColor);

	exportedRoom.physicsSettings.PhysicsWorldGravityX = room.GravityX;
	exportedRoom.physicsSettings.PhysicsWorldGravityY = room.GravityY;
	exportedRoom.physicsSettings.PhysicsWorldPixToMetres = room.MetersPerPixel;

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, room);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedRoom.tags.Add(tag.Content);
	}

	// paths
	string roomPath = "rooms/" + exportedRoom.name + "/";
	string exportedPath = $"{roomPath}{exportedRoom.name}.yy";
	Directory.CreateDirectory(rootPath + roomPath);

	// folder
	exportedRoom.parent = new IdReference
	{
		name = "Rooms",
		path = "folders/Rooms.yy"
	};
	if (_APND.Checked) exportedRoom.parent = APNDREF;

	// room creation code
	if (room.CreationCodeId != null)
	{
		string code = "";
		try { code = decompileCode(room.CreationCodeId); }
		catch (Exception e)
		{
			if (!skipErrors)
				ScriptError($"A room create event in {exportedRoom.name} failed to decompile!\n\n{e.ToString()}");
			else
				errorList.Add($"{exportedRoom.name} - {e.Message}");
			code = "/* (decompilation failed.) */\n";
		}
		File.WriteAllText(rootPath + roomPath + "RoomCreationCode.gml", code);
		exportedRoom.creationCodeFile = "${project_dir}/rooms/" + exportedRoom.name + "/RoomCreationCode.gml";
	}

	// add views
	for (var i = 0; i < room.Views.Count; i++)
	{
		var v = room.Views[i];
		exportedRoom.views[i] = new GMRoom.GMRView
		{
			visible = v.Enabled,
			xview = v.ViewX,
			yview = v.ViewY,
			wview = v.ViewWidth,
			hview = v.ViewHeight,
			xport = v.PortX,
			yport = v.PortY,
			wport = v.PortWidth,
			hport = v.PortHeight,
			hborder = v.BorderX,
			vborder = v.BorderY,
			hspeed = v.SpeedX,
			vspeed = v.SpeedY
		};
		if (v.ObjectId != null)
		{
			exportedRoom.views[i].objectId = new IdReference
			{
				name = v.ObjectId.Name.Content,
				path = $"objects/{v.ObjectId.Name.Content}/{v.ObjectId.Name.Content}.yy"
			};
		}
	}

	// port instance order
	foreach (var i in room.GameObjects)
	{
		var asset = new IdReference
		{
			name = instName((int)i.InstanceID),
			path = exportedPath
		};
		exportedRoom.instanceCreationOrder.Add(asset);
	}

	// add layers
	if (Data.IsGameMaker2())
	{
		for (var lid = 0; lid < room.Layers.Count; lid++)
		{
			var l = room.Layers[lid];
			if (l.Data != null)
			{
				// do different stuff depending on which layer type it is
				switch (l.LayerType)
				{
					case UndertaleRoom.LayerType.Instances: // Instances
						var instLayer = new GMRoom.GMRInstanceLayer
						{
							name = l.LayerName.Content,
							depth = l.LayerDepth,
							visible = l.IsVisible,
							userdefinedDepth = (l.LayerDepth != lid * 100)
						};

						if (l.InstancesData != null)
						{
							// loop through every instance in the layer.
							foreach (var i in l.InstancesData.Instances)
							{
								var inst = new GMRoom.GMRInstanceLayer.GMRInstance()
								{
									name = instName((int)i.InstanceID),
									x = i.X,
									y = i.Y,
									hasCreationCode = (i.CreationCode != null),
									scaleX = i.ScaleX,
									scaleY = i.ScaleY,
									colour = i.Color,
									rotation = i.Rotation,
									imageSpeed = i.ImageSpeed,
									imageIndex = i.ImageIndex
								};
								string objname = i.ObjectDefinition.Name.Content;
								
								// dump creation code
								string code = "";
								if (i.CreationCode != null)
								{
									try
									{
										code = decompileCode(i.CreationCode);
									}
									catch (Exception e)
									{
										if (!skipErrors)
											ScriptError("An " + objname + " with the ID of " + i.InstanceID + $"\nfailed to decompile its room creation code in {exportedRoom.name}!\n\n" + e.ToString());
										else
											errorList.Add($"{exportedRoom.name} - {objname} ({i.InstanceID}) - {e.Message}");
										code = "/* (decompilation failed.) */\n";
									}
								}
								
								// try to reverse the pre create event
								if (i.PreCreateCode != null)
								{
									try
									{
										string tempCode = decompileCode(i.PreCreateCode);
										tempCode = tempCode.Replace("event_inherited()\n", "");
										
										var varDefs = tempCode.Split("\n");
										foreach (var match in varDefs)
										{
											var find = match.Split(" = ");
											if (find.Length >= 2)
											{
												var varName = "";
												var varValue = "";
												
												foreach (var f in find)
												{
													if (varName == "")
														varName = f.Replace("self.", "");
													else
														varValue += f;
												}
												
												inst.properties.Add(new GMOverriddenProperty
												{
													propertyId = new IdReference
													{
														name = varName,
														path = $"objects/{objname}/{objname}.yy"
													},
													objectId = new IdReference
													{
														name = objname,
														path = $"objects/{objname}/{objname}.yy"
													},
													value = varValue
												});
											}
										}
									}
									catch (Exception e)
									{
										if (!skipErrors)
											ScriptError("An " + objname + " with the ID of " + i.InstanceID + "\nfailed to decompile its room pre-creation code in {exportedRoom.name}!\n\n" + e.ToString());
										else
											errorList.Add($"{exportedRoom.name} - {objname} ({i.InstanceID}) Pre-Create - {e.Message}");
									}
								}

								string roomcreate = rootPath + roomPath + "InstanceCreationCode_" + inst.name + ".gml";
								if (code != "")
									File.WriteAllText(roomcreate, code);

								string objpath = "objects/" + objname + "/" + objname + ".yy"; ;
								inst.objectId = new IdReference
								{
									name = objname,
									path = objpath
								};

								instLayer.instances.Add(inst);
							}
						}

						if (l.EffectData != null)
						{
							instLayer.effectType = l.EffectType.Content;
							instLayer.effectEnabled = l.EffectEnabled;

							foreach (var i in l.EffectProperties)
							{
								instLayer.properties.Add(new GMRoom.GMRLayer.GMEffectProp()
								{
									type = (int)i.Kind,
									name = i.Name.Content,
									value = i.Value.Content
								});
							}
						}
						exportedRoom.layers.Add(instLayer);
						break;

					case UndertaleRoom.LayerType.Tiles: // Tiles
						var tileLayer = new GMRoom.GMRTileLayer
						{
							name = l.LayerName.Content,
							depth = l.LayerDepth,
							visible = l.IsVisible,
							userdefinedDepth = (l.LayerDepth != lid * 100)
						};

						var tile = l.TilesData;
						if (tile != null)
						{
							if (tile.Background != null)
							{
								string tilename = tile.Background.Name.Content;
								string tilepath = "tilesets/" + tilename + "/" + tilename + ".yy";
								tileLayer.tilesetId = new IdReference
								{
									name = tilename,
									path = tilepath
								};
							}

							tileLayer.x = (int)l.XOffset;
							tileLayer.y = (int)l.YOffset;

							var tileset = new TileMap((int)tile.TilesX, (int)tile.TilesY)
							{
								SerialiseWidth = (int)tile.TilesX,
								SerialiseHeight = (int)tile.TilesY
							};

							// make tile data
							for (int x = 0; x < tile.TilesY; x++)
							{
								for (int y = 0; y < tile.TilesX; y++)
									tileset.TileSerialiseData.Add(tile.TileData[x][y]);
							}
							tileLayer.tiles = tileset;
						}

						if (l.EffectData != null)
						{
							tileLayer.effectType = l.EffectType.Content;
							tileLayer.effectEnabled = l.EffectEnabled;

							foreach (var i in l.EffectProperties)
							{
								tileLayer.properties.Add(new GMRoom.GMRLayer.GMEffectProp()
								{
									type = (int)i.Kind,
									name = i.Name.Content,
									value = i.Value.Content
								});
							}
						}
						exportedRoom.layers.Add(tileLayer);
						break;

					case UndertaleRoom.LayerType.Background: // Backgrounds
						var bgLayer = new GMRoom.GMRBackgroundLayer
						{
							name = l.LayerName.Content,
							depth = l.LayerDepth,
							visible = l.IsVisible,
							userdefinedDepth = (l.LayerDepth != lid * 100)
						};

						var bg = l.BackgroundData;
						if (bg != null)
						{
							if (bg.Sprite != null)
							{
								string bgname = bg.Sprite.Name.Content;
								string bgpath = "sprites/" + bgname + "/" + bgname + ".yy";
								bgLayer.spriteId = new IdReference
								{
									name = bgname,
									path = bgpath
								};
							}

							if (!bg.Visible)
								bgLayer.visible = false;
							bgLayer.htiled = bg.TiledHorizontally;
							bgLayer.vtiled = bg.TiledVertically;
							bgLayer.hspeed = l.HSpeed;
							bgLayer.vspeed = l.VSpeed;
							bgLayer.stretch = bg.Stretch;
							bgLayer.colour = bg.Color;
							bgLayer.animationFPS = bg.AnimationSpeed;
							bgLayer.animationSpeedType = (int)bg.AnimationSpeedType;
							bgLayer.x = (int)l.XOffset;
							bgLayer.y = (int)l.YOffset;
						}

						if (l.EffectData != null)
						{
							bgLayer.effectType = l.EffectType.Content;
							bgLayer.effectEnabled = l.EffectEnabled;

							foreach (var i in l.EffectProperties)
							{
								bgLayer.properties.Add(new GMRoom.GMRLayer.GMEffectProp()
								{
									type = (int)i.Kind,
									name = i.Name.Content,
									value = i.Value.Content
								});
							}
						}
						exportedRoom.layers.Add(bgLayer);
						break;

					case UndertaleRoom.LayerType.Assets: // Assets
						var assetLayer = new GMRoom.GMRAssetLayer
						{
							name = l.LayerName.Content,
							depth = l.LayerDepth,
							visible = l.IsVisible,
							userdefinedDepth = (l.LayerDepth != lid * 100)
						};

						if (l.AssetsData != null)
						{
							assetLayer.assets = new List<GMRoom.GMRAssetLayer.GMRAsset>();

							// normal assets
							foreach (var i in l.AssetsData.Sprites)
							{
								if (i == null || i.Sprite == null)
									continue;

								var ass = new GMRoom.GMRAssetLayer.GMRSpriteGraphic();

								ass.x = (float)i.X;
								ass.y = (float)i.Y;
								ass.scaleX = i.ScaleX;
								ass.scaleY = i.ScaleY;
								ass.colour = i.Color;
								ass.animationSpeed = i.AnimationSpeed;
								ass.headPosition = i.FrameIndex;
								ass.rotation = i.Rotation;
								ass.name = i.Name.Content;

								string assname = i.Sprite.Name.Content;
								string asspath = "sprites/" + assname + "/" + assname + ".yy";
								ass.spriteId = new IdReference
								{
									name = assname,
									path = asspath
								};

								assetLayer.assets.Add(ass);
							}

							// legacy tiles
							foreach (var i in l.AssetsData.LegacyTiles)
							{
								var ass = new GMRoom.GMRAssetLayer.GMRGraphic();

								ass.x = (float)i.X;
								ass.y = (float)i.Y;
								ass.w = i.Width;
								ass.h = i.Height;
								ass.u0 = i.SourceX;
								ass.v0 = i.SourceY;
								ass.u1 = i.SourceX + i.Width;
								ass.v1 = i.SourceY + i.Height;
								ass.name = instName((int)i.InstanceID);

								if (i.ObjectDefinition != null)
								{
									string assname = i.ObjectDefinition.Name.Content;
									string asspath = "sprites/" + assname + "/" + assname + ".yy";
									ass.spriteId = new IdReference
									{
										name = assname,
										path = asspath
									};
								}
								assetLayer.assets.Add(ass);
							}
						}

						if (l.EffectData != null)
						{
							assetLayer.effectType = l.EffectType.Content;
							assetLayer.effectEnabled = l.EffectEnabled;

							foreach (var i in l.EffectProperties)
							{
								assetLayer.properties.Add(new GMRoom.GMRLayer.GMEffectProp()
								{
									type = (int)i.Kind,
									name = i.Name.Content,
									value = i.Value.Content
								});
							}
						}
						exportedRoom.layers.Add(assetLayer);
						break;

					case UndertaleRoom.LayerType.Effect: // Effects
						var effectLayer = new GMRoom.GMREffectLayer
						{
							name = l.LayerName.Content,
							depth = l.LayerDepth,
							visible = l.IsVisible,
							userdefinedDepth = (l.LayerDepth != lid * 100)
						};

						if (l.EffectData != null)
						{
							effectLayer.effectType = l.EffectType.Content;
							effectLayer.effectEnabled = l.EffectEnabled;

							foreach (var i in l.EffectProperties)
							{
								effectLayer.properties.Add(new GMRoom.GMRLayer.GMEffectProp()
								{
									type = (int)i.Kind,
									name = i.Name.Content,
									value = i.Value.Content
								});
							}
						}
						exportedRoom.layers.Add(effectLayer);
						break;
				}
			}
		}
	}

	// convert GMS1 rooms to GMS2
	else
	{
		// add instances layer
		int lDepth = 0;
		var instlayer = new GMRoom.GMRInstanceLayer
		{
			name = "Instances_1",
			depth = 0,
		};

		foreach (var i in room.GameObjects)
		{
			var inst = new GMRoom.GMRInstanceLayer.GMRInstance();

			inst.name = instName((int)i.InstanceID);
			inst.x = i.X;
			inst.y = i.Y;
			inst.hasCreationCode = (i.CreationCode != null);
			inst.scaleX = i.ScaleX;
			inst.scaleY = i.ScaleY;
			inst.colour = i.Color;
			inst.rotation = i.Rotation;
			inst.imageSpeed = i.ImageSpeed;
			inst.imageIndex = i.ImageIndex;

			string objname = i.ObjectDefinition.Name.Content;
			string roomcreate = rootPath + roomPath + "InstanceCreationCode_" + inst.name + ".gml";

			string code = "";
			if (i.CreationCode != null)
			{
				try
				{
					code = decompileCode(i.CreationCode);
				}
				catch (Exception e)
				{
					if (!skipErrors)
						ScriptError("An " + objname + " with the ID of " + i.InstanceID + "\nfailed to decompile its room creation code in " + exportedRoom.name + "!\n\n" + e.ToString());
					else
						errorList.Add($"{exportedRoom.name} - {objname} ({i.InstanceID}) - {e.Message}");
					code = "/* (decompilation failed.) */\n";
				}
			}
			if (code != "")
				File.WriteAllText(roomcreate, code);

			string objpath = "objects/" + objname + "/" + objname + ".yy";
			inst.objectId = new IdReference
			{
				name = objname,
				path = objpath
			};

			instlayer.instances.Add(inst);
		}
		exportedRoom.layers.Add(instlayer);

		// compatibility tiles layer
		List<int> tiledepths = new List<int>();
		foreach (var i in room.Tiles)
		{
			if (!tiledepths.Contains(i.TileDepth))
				tiledepths.Add(i.TileDepth);
		}
		tiledepths.Sort();

		foreach (var j in tiledepths)
		{
			var tilelayer = new GMRoom.GMRAssetLayer
			{
				name = $"Tiles_Depth{j}",
				depth = j,
			};

			foreach (var i in room.Tiles)
			{
				if (i.BackgroundDefinition != null && i.TileDepth == j)
				{
					var graphic = new GMRoom.GMRAssetLayer.GMRGraphic
					{
						spriteId = new IdReference
						{
							name = i.BackgroundDefinition.Name.Content,
							path = $"sprites/{i.BackgroundDefinition.Name.Content}/{i.BackgroundDefinition.Name.Content}.yy"
						},
						x = (float)i.X,
						y = (float)i.Y,
						w = i.Width,
						h = i.Height,
						u0 = i.SourceX,
						v0 = i.SourceY,
						u1 = i.SourceX + i.Width,
						v1 = i.SourceY + i.Height,
						colour = i.Color
					};
					tilelayer.assets.Add(graphic);
				}
			}
			exportedRoom.layers.Add(tilelayer);

			lDepth = j;
		}

		// background layers
		bool dobgcolor = room.DrawBackgroundColor;
		for (var i = 0; i < room.Backgrounds.Count; i++)
		{
			var bg = room.Backgrounds[i];
			if (bg.BackgroundDefinition != null)
			{
				if (bg.Enabled)
					dobgcolor = false;

				string bgname = bg.BackgroundDefinition.Name.Content;
				string bgpath = "sprites/" + bgname + "/" + bgname + ".yy";

				var bglayer = new GMRoom.GMRBackgroundLayer
				{
					name = "Backgrounds_" + (i + 1),
					depth = lDepth + ((i + 1) * (bg.Foreground ? -100 : 100)),
					visible = bg.Enabled,
					x = bg.X,
					y = bg.Y,
					hspeed = bg.SpeedX,
					vspeed = bg.SpeedY,
					stretch = bg.Stretch,
					htiled = bg.TiledHorizontally,
					vtiled = bg.TiledVertically
				};

				bglayer.spriteId = new IdReference
				{
					name = bgname,
					path = bgpath
				};
				exportedRoom.layers.Add(bglayer);
			}
		}

		if (dobgcolor)
		{
			var bglayer = new GMRoom.GMRBackgroundLayer
			{
				name = "Backgrounds_1",
				depth = 100,
				colour = room.BackgroundColor
			};
			exportedRoom.layers.Add(bglayer);
		}
	}

	// finish
	doJson(exportedRoom, roomPath + $"{exportedRoom.name}.yy");
	AddResource(new IdReference
	{
		name = exportedRoom.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpTileset(UndertaleBackground bg)
{
	// make tileset into a sprite
	var exportedSprite = new GMSprite
	{
		name = (Data.IsGameMaker2() ? "tilespr_" : "") + bg.Name.Content,
		width = (int)bg.Texture.TargetWidth,
		height = (int)bg.Texture.TargetHeight,
		bbox_left = 0,
		bbox_right = (int)bg.Texture.TargetWidth - 1,
		bbox_bottom = (int)bg.Texture.TargetHeight - 1,
		bbox_top = 0,
		origin = 0
	};

	// make the tileset
	GMTileSet exportedTileset = new GMTileSet
	{
		name = bg.Name.Content,
		tileWidth = (int)bg.GMS2TileWidth,
		tileHeight = (int)bg.GMS2TileHeight,
		out_columns = (int)bg.GMS2TileColumns,
		tile_count = (int)bg.GMS2TileCount,
		tileAnimationSpeed = (float)(Math.Floor((double)(1000000 / bg.GMS2FrameLength) * 100) / 100),
		spriteNoExport = false, // we can't be sure that original sprite is used, so just in case...

		/*
			we can't automatically sort the tileset because the
			original columns are unknown, so a sacrifice must be made.
		*/
		tilexoff = (int)bg.GMS2OutputBorderX,
		tileyoff = (int)bg.GMS2OutputBorderY,
		tilehsep = (int)bg.GMS2OutputBorderX * 2,
		tilevsep = (int)bg.GMS2OutputBorderY * 2
	};

	// paths
	string tilesetPath = "tilesets/" + exportedTileset.name + "/";
	string exportedPath = $"tilesets/{exportedTileset.name}/{exportedTileset.name}.yy";
	string newFolderName = "Backgrounds";

	if (Data.IsGameMaker2())
	{
		newFolderName = "GMS2 TileSets";
		Directory.CreateDirectory(rootPath + tilesetPath);

		// folder
		exportedTileset.parent = new IdReference
		{
			name = "Tile Sets",
			path = "folders/Tile Sets.yy"
		};
		if (_APND.Checked) exportedTileset.parent = APNDREF;

		// tile ids
		var fcount = (int)bg.GMS2ItemsPerTileCount;
		exportedTileset.tileAnimation.SerialiseFrameCount = fcount;

		List<uint> lastid = new List<uint>(); // temporary variables
		List<uint> idignorer = new List<uint>();
		foreach (var i in bg.GMS2TileIds)
		{
			exportedTileset.tileAnimation.FrameData.Add(i.ID);
			if (fcount > 1)
			{
				if (lastid.Count >= fcount)
				{
					if (lastid.Distinct().Count() > 1 && !idignorer.Any(x => lastid.Any(y => y == x)))
					{
						// found animation
						exportedTileset.tileAnimationFrames.Add(new GMTileSet.GMTileAnimation
						{
							frames = new List<uint>(lastid),
							name = "animation_" + (exportedTileset.tileAnimationFrames.Count + 1)
						});
						idignorer.AddRange(lastid);
					}
					lastid.Clear();
				}
				lastid.Add(i.ID);
			}
		}

		// add the sprite into the tileset
		exportedTileset.spriteId = new IdReference
		{
			name = exportedSprite.name,
			path = $"sprites/{exportedSprite.name}/{exportedSprite.name}.yy"
		};
	}

	// sprite folders
	string spritePath = $"sprites/{exportedSprite.name}/";
	Directory.CreateDirectory(rootPath + spritePath);
	string spriteYYPath = $"{spritePath}{exportedSprite.name}.yy";

	// animation sequence
	exportedSprite.sequence = new GMSequence
	{
		spriteId = new IdReference
		{
			name = exportedSprite.name,
			path = spriteYYPath
		},
		playbackSpeed = 1,
		playbackSpeedType = 1,
		length = 1,
		name = exportedSprite.name,

		/*
		parent = new IdReference
		{
			name = exportedSprite.name,
			path = spriteYYPath
		}
		*/
	};

	// export texture as sprite
	string tgrp = "Default";
	var baseTrack = new GMSpriteFramesTrack();
	string layerGuid = Guid.NewGuid().ToString();
	exportedSprite.layers.Add(new GMSprite.GMImageLayer { name = layerGuid });

	// texture group
	if (tpageAlign.ContainsKey(bg.Texture.TexturePage.Name.Content))
		tgrp = tpageAlign[bg.Texture.TexturePage.Name.Content];
	else if (tpageAlign.ContainsKey(bg.Name.Content))
		tgrp = tpageAlign[bg.Name.Content];

	// make guids and stuff
	string compositeGuid = Guid.NewGuid().ToString();
	string layersPath = rootPath + spritePath + "layers/" + compositeGuid + "/";
	Directory.CreateDirectory(layersPath);

	// extract images
	Bitmap img;
	try
	{
		// fetch bitmap image
		img = worker.GetTextureFor(bg.Texture, compositeGuid + ".png", true);
	}
	catch
	{
		// give up immediately and make an empty image
		img = new Bitmap(exportedSprite.width, exportedSprite.height);
	}
	
	TextureWorker.SaveImageToFile(rootPath + spritePath + compositeGuid + ".png", img, false);
	TextureWorker.SaveImageToFile(layersPath + layerGuid + ".png", img, false);
	if (Data.IsGameMaker2())
		TextureWorker.SaveImageToFile(rootPath + tilesetPath + "output_tileset.png", img, false);
	
	img.Dispose();

	// add to frames
	var spriteFrame = new GMSprite.GMSpriteFrame();
	spriteFrame.name = compositeGuid;

	// pre-2022.8
	/*
	spriteFrame.compositeImage.FrameId = new IdReference
	{
		name = compositeGuid,
		path = spriteYYPath
	};
	spriteFrame.parent = new IdReference
	{
		name = exportedSprite.name,
		path = spriteYYPath
	};

	var spriteFrame2 = new GMSprite.GMSpriteBitmap();
	spriteFrame2.FrameId = new IdReference
	{
		name = compositeGuid,
		path = spriteYYPath
	};
	spriteFrame2.LayerId = new IdReference
	{
		name = layerGuid,
		path = spriteYYPath
	};

	spriteFrame.images.Add(spriteFrame2);
	*/

	exportedSprite.frames.Add(spriteFrame);

	// add to sequence
	var channelId = new IdReference
	{
		name = compositeGuid,
		path = spriteYYPath
	};
	var keyframe = new Keyframe<SpriteFrameKeyframe>
	{
		Key = 0.0f,
		Length = 1.0f,
	};
	keyframe.Channels.Add("0", new SpriteFrameKeyframe { Id = channelId });
	baseTrack.keyframes.Keyframes.Add(keyframe);
	exportedSprite.sequence.tracks.Add(baseTrack);

	// apply texture page
	if (tgrp.StartsWith("__YY__") && tgrp.Contains("_YYG_AUTO_GEN_TEX_GROUP_NAME_"))
		exportedSprite.For3D = true;
	else
	{
		exportedSprite.textureGroupId = new IdReference
		{
			name = tgrp,
			path = $"texturegroups/{tgrp}"
		};
	}

	// finish
	if (_APND.Checked)
		exportedSprite.parent = APNDREF;
	else
	{
		addFolder(newFolderName, $"Sprites/{newFolderName}", Data.Sprites.Count);
		exportedSprite.parent = new IdReference
		{
			name = newFolderName,
			path = $"folders/Sprites/{newFolderName}.yy"
		};
	}

	doJson(exportedSprite, spritePath + $"{exportedSprite.name}.yy");
	AddResource(new IdReference
	{
		name = exportedSprite.name,
		path = spriteYYPath
	});

	if (Data.IsGameMaker2())
	{
		exportedTileset.textureGroupId = exportedSprite.textureGroupId;

		// tags
		var tagid = UndertaleTags.GetAssetTagID(Data, bg);
		if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
		{
			foreach (var tag in Data.Tags.AssetTags[tagid])
			{
				exportedTileset.tags.Add(tag.Content);
				exportedSprite.tags.Add(tag.Content);
			}
		}

		doJson(exportedTileset, tilesetPath + $"{exportedTileset.name}.yy");
		AddResource(new IdReference
		{
			name = exportedTileset.name,
			path = exportedPath
		});
	}
	UpdateProgress();
}

void DumpScript(UndertaleScript scr)
{
	if ((scr.Code != null && scr.Code.ParentEntry != null) || (scr.Code == null && scr.Name.Content.StartsWith("gml_Script_")))
	{
		UpdateProgress();
		return;
	}

	var exportedScript = new GMScript
	{
		name = scr.Name.Content.Replace("gml_Script_", ""),
		//isCompatibility = !Data.GMS2_3
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, scr);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedScript.tags.Add(tag.Content);
	}

	// folder
	exportedScript.parent = new IdReference
	{
		name = "Scripts",
		path = "folders/Scripts.yy"
	};
	if (_APND.Checked) exportedScript.parent = APNDREF;

	// paths
	string scriptPath = "scripts/" + exportedScript.name + "/";
	string exportedPath = $"scripts/{exportedScript.name}/{exportedScript.name}.yy";
	Directory.CreateDirectory(rootPath + scriptPath);

	// export code
	string code = "";
	if (scr.Code != null)
	{
		try
		{
			code = decompileCode(scr.Code);
		}
		catch (Exception e)
		{
			if (!skipErrors)
				ScriptError("The script " + exportedScript.name + " failed to decompile its code!\n\n" + e.ToString());
			else
				errorList.Add($"{exportedScript.name} - {e.Message}");
			code = "/* (decompilation failed.) */\n";
		}
	}

	if (code != "")
		File.WriteAllText(rootPath + scriptPath + exportedScript.name + ".gml", code);

	// finish
	doJson(exportedScript, scriptPath + $"{exportedScript.name}.yy");
	AddResource(new IdReference
	{
		name = exportedScript.name,
		path = exportedPath
	});
	UpdateProgress();
}

WaveFileReader wavReader;
VorbisWaveReader oggReader;
Mp3FileReader mp3Reader;

void DumpSound(UndertaleSound snd)
{
	var exportedSound = new GMSound
	{
		name = snd.Name.Content,
		volume = snd.Volume,
		preload = snd.Preload,
	};
	if (snd.File != null && snd.File.Content != "")
		exportedSound.soundFile = snd.File.Content;

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, snd);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedSound.tags.Add(tag.Content);
	}

	// compression type
	if (snd.Flags.HasFlag(UndertaleSound.AudioEntryFlags.IsDecompressedOnLoad))
		exportedSound.compression = 2;
	else if (snd.Flags.HasFlag(UndertaleSound.AudioEntryFlags.IsCompressed))
		exportedSound.compression = 1;
	else if (snd.Flags.HasFlag(UndertaleSound.AudioEntryFlags.IsEmbedded))
		exportedSound.compression = 0;
	else if (File.Exists(dataPath + exportedSound.soundFile))
		exportedSound.compression = 3;
	else
		return;
	
	// audio group
	string agrp = "audiogroup_default";

	var tryagrp = Data.AudioGroups.ElementAtOrDefault(snd.GroupID);
	if (tryagrp == null)
		tryagrp = Data.AudioGroups.ByName(agrp);
	if (tryagrp != null)
		agrp = tryagrp.Name.Content;

	exportedSound.audioGroupId = new IdReference
	{
		name = agrp,
		path = $"audiogroups/{agrp}"
	};

	// paths
	string soundPath = "sounds/" + exportedSound.name + "/";
	string exportedPath = $"sounds/{exportedSound.name}/{exportedSound.name}.yy";
	Directory.CreateDirectory(rootPath + soundPath);

	// export sound
	if (exportedSound.soundFile != null)
	{
		string soundFilePath = rootPath + soundPath + exportedSound.soundFile;
		try
		{
			if (snd.GroupID != 0 && File.Exists(dataPath + $"audiogroup{snd.GroupID}.dat"))
			{
				UndertaleData data = null;
				using (var stream = new FileStream(dataPath + $"audiogroup{snd.GroupID}.dat", FileMode.Open, FileAccess.Read))
					data = UndertaleIO.Read(stream);
				File.WriteAllBytes(soundFilePath, data.EmbeddedAudio[snd.AudioID].Data);
			}
			else if (snd.AudioFile != null)
				File.WriteAllBytes(soundFilePath, snd.AudioFile.Data);
			else if (File.Exists(dataPath + exportedSound.soundFile))
				File.Copy(dataPath + exportedSound.soundFile, soundFilePath, true);

			// read the file
			byte[] dat = File.ReadAllBytes(soundFilePath);

			// some audio files might be all null characters
			if (dat.All(i => i == 0))
			{
				File.Delete(soundFilePath);
				exportedSound.soundFile = "";
			}
			else
			{
				// get audio properties
				WaveStream wavReader = null;

				if (dat != null && dat.Length > 4)
				{
					if (dat[0] == 'R' && dat[1] == 'I' && dat[2] == 'F' && dat[3] == 'F')
						wavReader = new WaveFileReader(soundFilePath);
					else if (dat[0] == 'O' && dat[1] == 'g' && dat[2] == 'g' && dat[3] == 'S')
						wavReader = new VorbisWaveReader(soundFilePath);
					else
					{
						try
						{
							wavReader = new Mp3FileReader(soundFilePath);
						}
						catch { } // please stop trying
					}
				}

				if (wavReader != null)
				{
					exportedSound.sampleRate = wavReader.WaveFormat.SampleRate;
					exportedSound.type = wavReader.WaveFormat.Channels - 1;

					var audiolen = wavReader.TotalTime;
					exportedSound.duration = (((float)audiolen.Hours * 60) * 60) + ((float)audiolen.Minutes * 60) + (float)audiolen.Seconds + ((float)audiolen.Milliseconds / 1000);
				}
			}
		}
		catch (Exception e)
		{
			if (!skipErrors)
				ScriptError($"The sound {snd.Name.Content} failed to export!\n\n{e.ToString()}");
			else
				errorList.Add($"{snd.Name.Content} - {e.Message}");
		}
	}

	// folder
	exportedSound.parent = new IdReference
	{
		name = "Sounds",
		path = "folders/Sounds.yy"
	};
	if (_APND.Checked) exportedSound.parent = APNDREF;

	// finish
	doJson(exportedSound, soundPath + $"{exportedSound.name}.yy");
	AddResource(new IdReference
	{
		name = exportedSound.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpShader(UndertaleShader shd)
{
	var exportedShader = new GMShader
	{
		name = shd.Name.Content,
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, shd);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedShader.tags.Add(tag.Content);
	}

	// folder
	exportedShader.parent = new IdReference
	{
		name = "Shaders",
		path = "folders/Shaders.yy"
	};
	if (_APND.Checked) exportedShader.parent = APNDREF;

	// paths
	string shaderPath = "shaders/" + exportedShader.name + "/";
	string exportedPath = $"shaders/{exportedShader.name}/{exportedShader.name}.yy";
	Directory.CreateDirectory(rootPath + shaderPath);

	// shader type
	switch((int)shd.Type)
	{
		case 1: exportedShader.type = 1; break;
		case 2: exportedShader.type = 2; break;
		case 4: exportedShader.type = 3; break;
		case 5: exportedShader.type = 4; break;
	}

	// port shader vertex and fragment
	var vertex = shd.GLSL_ES_Vertex.Content;
	var fragment = shd.GLSL_ES_Fragment.Content;

	if (vertex != null && fragment != null)
	{
		string splitter = "#define _YY_GLSLES_ 1\n";
		if (vertex.Contains(splitter))
			vertex = vertex.Substring(vertex.IndexOf(splitter) + splitter.Length);
		if (fragment.Contains(splitter))
			fragment = fragment.Substring(fragment.IndexOf(splitter) + splitter.Length);

		File.WriteAllText(rootPath + shaderPath + exportedShader.name + ".vsh", vertex);
		File.WriteAllText(rootPath + shaderPath + exportedShader.name + ".fsh", fragment);
	}

	// finish
	doJson(exportedShader, shaderPath + $"{exportedShader.name}.yy");
	AddResource(new IdReference
	{
		name = exportedShader.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpFont(UndertaleFont font)
{
	var exportedFont = new GMFont
	{
		name = font.Name.Content,
		size = (float)font.EmSize,
		fontName = font.DisplayName.Content,
		first = (int)font.RangeStart,
		last = (int)font.RangeEnd,
		AntiAlias = (int)font.AntiAliasing,
		ascenderOffset = (int)font.AscenderOffset,
		ascender = (int)font.Ascender,
		canGenerateBitmap = false,
		maintainGms1Font = true,
	};
	if (font.Bold)
	{
		exportedFont.styleName = "Bold";
		if (font.Italic)
			exportedFont.styleName = "Bold Italic";
	}
	else if (font.Italic)
		exportedFont.styleName = "Italic";

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, font);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedFont.tags.Add(tag.Content);
	}

	// folder
	exportedFont.parent = new IdReference
	{
		name = "Fonts",
		path = "folders/Fonts.yy"
	};
	if (_APND.Checked) exportedFont.parent = APNDREF;

	// paths
	string fontPath = "fonts/" + exportedFont.name + "/";
	string exportedPath = $"fonts/{exportedFont.name}/{exportedFont.name}.yy";
	Directory.CreateDirectory(rootPath + fontPath);

	// port glyphs
	foreach (var glyph in font.Glyphs)
	{
		exportedFont.glyphs[(int)glyph.Character] = new GMFont.Glyph
		{
			x = (int)glyph.SourceX,
			y = (int)glyph.SourceY,
			w = (int)glyph.SourceWidth,
			h = (int)glyph.SourceHeight,
			shift = (int)glyph.Shift,
			offset = (int)glyph.Offset,
			character = (int)glyph.Character
		};
	}

	// export font sprite
	string tgrp = "Default";
	if (font.Texture != null)
	{
		worker.ExportAsPNG(font.Texture, rootPath + fontPath + exportedFont.name + ".png", null, true);

		if (tpageAlign.ContainsKey(font.Texture.TexturePage.Name.Content))
			tgrp = tpageAlign[font.Texture.TexturePage.Name.Content];
		else if (tpageAlign.ContainsKey(exportedFont.name))
			tgrp = tpageAlign[exportedFont.name];
	}
	exportedFont.textureGroupId = new IdReference
	{
		name = tgrp,
		path = $"texturegroups/{tgrp}"
	};

	// finish
	doJson(exportedFont, fontPath + $"{exportedFont.name}.yy");
	AddResource(new IdReference
	{
		name = exportedFont.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpPath(UndertalePath path)
{
	var exportedPth = new GMPath
	{
		name = path.Name.Content,
		kind = (path.IsSmooth ? 1 : 0),
		closed = path.IsClosed,
		precision = (int)path.Precision
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, path);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedPth.tags.Add(tag.Content);
	}

	// add path points
	foreach (var point in path.Points)
	{
		exportedPth.points.Add(new GMPath.PathPoint
		{
			x = point.X,
			y = point.Y,
			speed = point.Speed
		});
	}

	// folder
	exportedPth.parent = new IdReference
	{
		name = "Paths",
		path = "folders/Paths.yy"
	};
	if (_APND.Checked) exportedPth.parent = APNDREF;

	// paths
	string pathPath = "paths/" + exportedPth.name + "/";
	string exportedPath = $"paths/{exportedPth.name}/{exportedPth.name}.yy";
	Directory.CreateDirectory(rootPath + pathPath);

	// finish
	doJson(exportedPth, pathPath + $"{exportedPth.name}.yy");
	AddResource(new IdReference
	{
		name = exportedPth.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpTimeline(UndertaleTimeline tl)
{
	var exportedTL = new GMTimeline
	{
		name = tl.Name.Content,
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, tl);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedTL.tags.Add(tag.Content);
	}

	// folder
	exportedTL.parent = new IdReference
	{
		name = "Timelines",
		path = "folders/Timelines.yy"
	};
	if (_APND.Checked) exportedTL.parent = APNDREF;

	// paths
	string tlPath = "timelines/" + exportedTL.name + "/";
	string exportedPath = $"timelines/{exportedTL.name}/{exportedTL.name}.yy";
	Directory.CreateDirectory(rootPath + tlPath);

	// moments
	foreach (var tm in tl.Moments)
	{
		exportedTL.momentList.Add(new GMMoment
		{
			moment = (int)tm.Step,
			evnt = new GMEvent
			{
				eventNum = (int)tm.Step
			}
		});

		string code = "";
		foreach (var m in tm.Event)
		{
			if (m.CodeId != null)
			{
				try
				{
					code += decompileCode(m.CodeId);
				}
				catch (Exception e)
				{
					code += "/* (decompilation failed.) */\n";
				}
			}
		}
		File.WriteAllText(rootPath + tlPath + $"moment_{tm.Step}.gml", code);
	}

	// finish
	doJson(exportedTL, tlPath + $"{exportedTL.name}.yy");
	AddResource(new IdReference
	{
		name = exportedTL.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpSequence(UndertaleSequence seq)
{
	var exportedSeq = new GMSequence
	{
		name = seq.Name.Content,
		playback = (int)seq.Playback,
		playbackSpeed = seq.PlaybackSpeed,
		playbackSpeedType = (int)seq.PlaybackSpeedType,
		length = seq.Length,
		xorigin = seq.OriginX,
		yorigin = seq.OriginY,
		volume = seq.Volume,
	};
	string stubscript = "";

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, seq);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedSeq.tags.Add(tag.Content);
	}

	// folder
	exportedSeq.parent = new IdReference
	{
		name = "Sequences",
		path = "folders/Sequences.yy"
	};
	if (_APND.Checked) exportedSeq.parent = APNDREF;

	// paths
	string seqPath = "sequences/" + exportedSeq.name + "/";
	string exportedPath = $"sequences/{exportedSeq.name}/{exportedSeq.name}.yy";
	Directory.CreateDirectory(rootPath + seqPath);

	// tracks
	List<GMBaseTrack> DumpTracks(ICollection<UndertaleSequence.Track> tracks)
	{
		var tracklist = new List<GMBaseTrack>();

		foreach (var track in tracks)
		{
			GMBaseTrack GMTrack = null;
			switch (track.ModelName.Content)
			{
				default:
					if (!skipErrors)
						throw new Exception($"Unimplemented sequence track type in {seq.Name.Content}: \"{track.ModelName.Content}\"");
					else
					{
						var errorStr = $"{exportedSeq.name} - Unimplemented sequence track type \"{track.ModelName.Content}\"";
						if (!errorList.Contains(errorStr))
							errorList.Add(errorStr);
					}
					break;

				case "GMGroupTrack":
					GMTrack = new GMGroupTrack();
					break;
				
				case "GMClipMaskTrack": // contains the mask and subject tracks as subtracks, but has no data of it's own
					GMTrack = new GMClipMaskTrack();
					break;
				case "GMClipMask_Mask":
					GMTrack = new GMClipMask_Mask();
					break;
				case "GMClipMask_Subject":
					GMTrack = new GMClipMask_Subject();
					break;

				case "GMAudioTrack":
					GMTrack = new GMAudioTrack();
					foreach (var keyframe in (track.Keyframes as UndertaleSequence.AudioKeyframes).List)
					{
						var GMKeyframe = new Keyframe<AudioKeyframe>
						{
							Key = keyframe.Key,
							Length = keyframe.Length,
							Stretch = keyframe.Stretch,
							Disabled = keyframe.Disabled,
						};

						foreach (var ch in keyframe.Channels)
						{
							var resourceName = ch.Value.Resource.Resource.Name.Content;
							var value = new AudioKeyframe
							{
								Mode = ch.Value.Mode,
								Id = new IdReference
								{
									name = resourceName,
									path = $"sounds/{resourceName}/{resourceName}.yy",
								}
							};
							GMKeyframe.Channels.Add(ch.Key.ToString(), value);
						}
						
						(GMTrack as GMAudioTrack).keyframes.Keyframes.Add(GMKeyframe);
					}
					break;

				case "GMGraphicTrack":
					GMTrack = new GMGraphicTrack();
					foreach (var keyframe in (track.Keyframes as UndertaleSequence.GraphicKeyframes).List)
					{
						var GMKeyframe = new Keyframe<AssetSpriteKeyframe>
						{
							Key = keyframe.Key,
							Length = keyframe.Length,
							Stretch = keyframe.Stretch,
							Disabled = keyframe.Disabled,
						};

						foreach (var ch in keyframe.Channels)
						{
							var resourceName = ch.Value.Resource.Resource.Name.Content;

							var value = new AssetSpriteKeyframe();
							value.Id = new IdReference
							{
								name = resourceName,
								path = $"sprites/{resourceName}/{resourceName}.yy",
							};
							GMKeyframe.Channels.Add(ch.Key.ToString(), value);
						}

						(GMTrack as GMGraphicTrack).keyframes.Keyframes.Add(GMKeyframe);
					}
					break;

				case "GMInstanceTrack":
					GMTrack = new GMInstanceTrack();
					foreach (var keyframe in (track.Keyframes as UndertaleSequence.InstanceKeyframes).List)
					{
						var GMKeyframe = new Keyframe<AssetInstanceKeyframe>
						{
							Key = keyframe.Key,
							Length = keyframe.Length,
							Stretch = keyframe.Stretch,
							Disabled = keyframe.Disabled,
						};

						foreach (var ch in keyframe.Channels)
						{
							var resourceName = ch.Value.Resource.Resource.Name.Content;

							var value = new AssetInstanceKeyframe();
							value.Id = new IdReference
							{
								name = resourceName,
								path = $"objects/{resourceName}/{resourceName}.yy",
							};
							GMKeyframe.Channels.Add(ch.Key.ToString(), value);
						}

						(GMTrack as GMInstanceTrack).keyframes.Keyframes.Add(GMKeyframe);
					}
					break;

				case "GMRealTrack":
					GMTrack = new GMRealTrack();
					GMTrack.interpolation = (track.Keyframes as UndertaleSequence.RealKeyframes).Interpolation;

					foreach (var keyframe in (track.Keyframes as UndertaleSequence.RealKeyframes).List)
					{
						var GMKeyframe = new Keyframe<RealKeyframe>
						{
							Key = keyframe.Key,
							Length = keyframe.Length,
							Stretch = keyframe.Stretch,
							Disabled = keyframe.Disabled,
						};

						foreach (var ch in keyframe.Channels)
						{
							var value = new RealKeyframe
							{
								RealValue = ch.Value.Value,
							};
							if (ch.Value.AssetAnimCurve != null && ch.Value.AssetAnimCurve.Resource != null)
							{
								var n = ch.Value.AssetAnimCurve.Resource.Name.Content;
								value.AnimCurveId = new IdReference
								{
									name = n,
									path = $"animcurves/{n}/{n}.yy"
								};
							}
							GMKeyframe.Channels.Add(ch.Key.ToString(), value);
						}

						(GMTrack as GMRealTrack).keyframes.Keyframes.Add(GMKeyframe);
					}
					break;

				case "GMColourTrack": // doesnt even work cuz utmt is trying to read an uint as a float
					GMTrack = new GMColourTrack();
					GMTrack.interpolation = (track.Keyframes as UndertaleSequence.RealKeyframes).Interpolation;

					foreach (var keyframe in (track.Keyframes as UndertaleSequence.RealKeyframes).List)
					{
						var GMKeyframe = new Keyframe<ColourKeyframe>
						{
							Key = keyframe.Key,
							Length = keyframe.Length,
							Stretch = keyframe.Stretch,
							Disabled = keyframe.Disabled,
						};

						foreach (var ch in keyframe.Channels)
						{
							var value = new ColourKeyframe
							{
								Colour = (uint)ch.Value.Value,
							};
							if (ch.Value.AssetAnimCurve != null && ch.Value.AssetAnimCurve.Resource != null)
							{
								var n = ch.Value.AssetAnimCurve.Resource.Name.Content;
								value.AnimCurveId = new IdReference
								{
									name = n,
									path = $"animcurves/{n}/{n}.yy"
								};
							}
							GMKeyframe.Channels.Add(ch.Key.ToString(), value);
						}

						(GMTrack as GMColourTrack).keyframes.Keyframes.Add(GMKeyframe);
					}
					break;

				case "GMTextTrack": // UTMT DOESNT EVEN FUCKING DECOMPILE THIS ONE
					break;
			}
			//if (GMTrack != null)
			//{
			//	GMTrack.name = track.Name.Content;
			//	GMTrack.isCreationTrack = track.IsCreationTrack;
				//GMTrack.builtinName = track.BuiltinName;
			//	GMTrack.traits = track.Traits;
			//	GMTrack.tracks = DumpTracks(track.Tracks);
			//	tracklist.Add(GMTrack);
			//}
		}

		return tracklist;
	}
	exportedSeq.tracks = DumpTracks(seq.Tracks);
	
	// events
	foreach (var i in seq.BroadcastMessages)
	{
		var kf = new Keyframe<MessageEventKeyframe>
		{
			Key = i.Key,
			Length = i.Length,
			Stretch = i.Stretch,
			Disabled = i.Disabled
		};
		foreach (var ch in i.Channels)
		{
			var msg = new MessageEventKeyframe
			{
				Events = new List<string>()
			};
			foreach (var ev in ch.Value.Messages)
				msg.Events.Add(ev.Content);
			kf.Channels.Add(ch.Key.ToString(), msg);
		}
		exportedSeq.events.Keyframes.Add(kf);
	}

	// moments
	foreach (var i in seq.Moments)
	{
		var kf = new Keyframe<MomentsEventKeyframe>
		{
			Key = i.Key,
			Length = i.Length,
			Stretch = i.Stretch,
			Disabled = i.Disabled
		};
		foreach (var ch in i.Channels)
		{
			var msg = new MomentsEventKeyframe
			{
				Events = new List<string>()
			};
			var ev = ch.Value.Event;
			if (ev != null)
			{
				msg.Events.Add(ev.Content.Replace("gml_Script_", ""));

				var try2find = Data.Scripts.ByName(ev.Content);
				if (try2find != null && try2find.Code != null && try2find.Code.ParentEntry != null)
					stubscript = try2find.Code.ParentEntry.Name.Content.Replace("gml_GlobalScript_", "");
			}
			kf.Channels.Add(ch.Key.ToString(), msg);
		}
		exportedSeq.moments.Keyframes.Add(kf);
	}

	// event to function
	foreach (var i in seq.FunctionIDs)
		exportedSeq.eventToFunction.Add(i.Key, i.Value.Content.Replace("gml_Script_", ""));

	// stub script
	if (stubscript != "")
	{
		exportedSeq.eventStubScript = new IdReference
		{
			name = stubscript,
			path = $"scripts/{stubscript}/{stubscript}.yy"
		};
	}

	// finish
	doJson(exportedSeq, seqPath + $"{exportedSeq.name}.yy");
	AddResource(new IdReference
	{
		name = exportedSeq.name,
		path = exportedPath
	});
	UpdateProgress();
}
void DumpExtension(UndertaleExtension ext)
{
	var exportedExt = new GMExtension
	{
		name = ext.Name.Content,
		classname = ext.ClassName.Content,
	};

	// utmt doesn't like tags with this one.

	// folder
	exportedExt.parent = new IdReference
	{
		name = "Extensions",
		path = "folders/Extensions.yy"
	};
	if (_APND.Checked) exportedExt.parent = APNDREF;

	// paths
	string extPath = "extensions/" + exportedExt.name + "/";
	string exportedPath = $"extensions/{exportedExt.name}/{exportedExt.name}.yy";
	Directory.CreateDirectory(rootPath + extPath);

	// file list
	foreach (var file in ext.Files)
	{
		var outFile = new GMExtensionFile
		{
			filename = file.Filename.Content,
			init = file.InitScript.Content,
			final = file.CleanupScript.Content,
			kind = (int)file.Kind
		};

		// files
		if (file.Kind == UndertaleExtensionKind.GML)
		{
			var fileContent = "// UNIMPLEMENTED!!!";

			// loop thru every script that doesn't have a parent, and add it
			// to the ignorer list, i think. i think. probably not. idk.

			File.WriteAllText(rootPath + extPath + outFile.filename, fileContent);
		}
		else if (File.Exists(dataPath + outFile.filename))
			File.Copy(dataPath + outFile.filename, rootPath + extPath + outFile.filename, true);

		// functions
		foreach (var func in file.Functions)
		{
			var outFunc = new GMExtensionFunction()
			{
				name = func.Name.Content,
				externalName = func.ExtName.Content,
				returnType = (int)func.RetType,
				kind = (int)func.Kind,
				argCount = func.Arguments.Count,
			};

			// arguments
			foreach (var arg in func.Arguments)
				outFunc.args.Add((int)arg.Type);

			outFile.functions.Add(outFunc);
		}
		exportedExt.files.Add(outFile);
	}

	// finish
	doJson(exportedExt, extPath + $"{exportedExt.name}.yy");
	AddResource(new IdReference
	{
		name = exportedExt.name,
		path = exportedPath
	});
	UpdateProgress();
}

void DumpCurve(UndertaleAnimationCurve curve)
{
	var exportedCurve = new GMAnimCurve
	{
		name = curve.Name.Content,
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, curve);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedCurve.tags.Add(tag.Content);
	}

	// folder
	exportedCurve.parent = new IdReference
	{
		name = "Animation Curves",
		path = "folders/Animation Curves.yy"
	};
	if (_APND.Checked) exportedCurve.parent = APNDREF;

	// paths
	string curvePath = "animcurves/" + exportedCurve.name + "/";
	string exportedPath = $"{curvePath}{exportedCurve.name}.yy";
	Directory.CreateDirectory(rootPath + curvePath);

	// channels and points
	foreach (var ch in curve.Channels)
	{
		if (exportedCurve.function != 2)
			exportedCurve.function = (int)ch.Function;

		var outChannel = new GMAnimCurveChannel()
		{
			name = ch.Name.Content,
			colour = 4290799884,
		};
		foreach (var point in ch.Points)
		{
			var outPoint = new CurvePoint()
			{
				x = point.X,
				y = point.Value,
				th0 = point.BezierX0,
				th1 = point.BezierX1,
				tv0 = point.BezierY0,
				tv1 = point.BezierY1
			};
			if (outPoint.th0 != 0 || outPoint.th1 != 0 || outPoint.tv0 != 0 || outPoint.tv1 != 0)
				exportedCurve.function = 2;

			outChannel.points.Add(outPoint);
		}

		exportedCurve.channels.Add(outChannel);
	}

	// finish
	doJson(exportedCurve, curvePath + $"{exportedCurve.name}.yy");
	AddResource(new IdReference
	{
		name = exportedCurve.name,
		path = exportedPath
	});
	UpdateProgress();
}

/*
void DumpTemplate(UndertaleObject a)
{
	var exportedA = new GMA
	{
		name = a.Name.Content,
	};

	// tags
	var tagid = UndertaleTags.GetAssetTagID(Data, a);
	if (Data.Tags != null && Data.Tags.AssetTags.ContainsKey(tagid))
	{
		foreach (var tag in Data.Tags.AssetTags[tagid])
			exportedA.tags.Add(tag.Content);
	}
	
	// folder
	exportedA.parent = new IdReference
	{
		name = "A",
		path = "folders/A.yy"
	};
	if (_APND.Checked) exportedA.parent = APNDREF;
	
	// paths
	string aPath = "a/" + exportedA.name + "/";
	string exportedPath = $"a/{exportedA.name}/{exportedA.name}.yy";
	Directory.CreateDirectory(rootPath + aPath);
	
	// finish
	doJson(exportedA, aPath + $"{exportedA.name}.yy");
	AddResource(new IdReference
	{
		name = exportedA.name,
		path = exportedPath
	});
	UpdateProgress();
}
*/

async Task DumpSprites()
{
	for (var i = 0; i < Data.Sprites.Count; i++)
	{
		var dumpy = Data.Sprites[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpSprite(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpObjects()
{
	for (var i = 0; i < Data.GameObjects.Count; i++)
	{
		var dumpy = Data.GameObjects[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpObject(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpRooms()
{
	for (var i = 0; i < Data.Rooms.Count; i++)
	{
		var dumpy = Data.Rooms[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpRoom(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpTilesets()
{
	for (var i = 0; i < Data.Backgrounds.Count; i++)
	{
		var dumpy = Data.Backgrounds[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpTileset(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpScripts()
{
	for (var i = 0; i < Data.Scripts.Count; i++)
	{
		var dumpy = Data.Scripts[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpScript(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}

	// extra script
	if (CSTM.Count == 0)
	{
		string code = "";
		var globalinit = new GMScript
		{
			name = "hqdecomp_globalinit",
			parent = new IdReference
			{
				name = "Scripts",
				path = "folders/Scripts.yy"
			}
		};
		if (_APND.Checked) globalinit.parent = APNDREF;

		while (Data.Scripts.Any(i => i.Name != null && i.Name.Content == globalinit.name))
			globalinit.name = $"_{globalinit.name}";

		// global init code
		if (Data.GlobalInitScripts.Count > 0)
		{
			foreach (var i in Data.GlobalInitScripts)
			{
				if (i.Code != null && Regex.IsMatch(i.Code.Name.Content, @"gml_GlobalScript_(\d+)"))
				{
					try { code += decompileCode(i.Code); }
					catch (Exception e)
					{
						if (!skipErrors)
							ScriptError("The global script " + i.Code.Name.Content + " failed to decompile!\n\n" + e.ToString());
						else
							errorList.Add($"{i.Code.Name.Content} - {e.Message}");
						code += "/* (decompilation failed.) */\n";
					}
				}
			}
			if (code != "")
				code += "\n";
		}

		// GMS1 compatibility scripts
		if (!Data.IsGameMaker2())
		{
			// object depths
			string objectDepths = "";
			string objectNames = "";

			for (var i = 0; i < Data.GameObjects.Count; i++)
			{
				objectDepths += $"\tglobal.__objectDepths[{i}] = {Data.GameObjects[i].Depth}; // {Data.GameObjects[i].Name.Content}\n";
				objectNames += $"\tglobal.__objectNames[{i}] = \"{Data.GameObjects[i].Name.Content}\";\n";
			}

			code += $"/// GMS1 Compatibility Scripts\n{GMS1Compatibility.Replace("\t//${compatibilityObjectDepths}", $"{objectDepths}\n\n{objectNames}")}";
		}

		// save it
		if (code != "")
		{
			// paths
			string scriptPath = "scripts/" + globalinit.name + "/";
			string exportedPath = $"scripts/{globalinit.name}/{globalinit.name}.yy";
			Directory.CreateDirectory(rootPath + scriptPath);

			// finish
			File.WriteAllText(rootPath + scriptPath + globalinit.name + ".gml", code);

			doJson(globalinit, scriptPath + $"{globalinit.name}.yy");
			AddResource(new IdReference
			{
				name = globalinit.name,
				path = exportedPath
			});
		}
	}
}
async Task DumpSounds()
{
	for (var i = 0; i < Data.Sounds.Count; i++)
	{
		var dumpy = Data.Sounds[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpSound(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpShaders()
{
	for (var i = 0; i < Data.Shaders.Count; i++)
	{
		var dumpy = Data.Shaders[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpShader(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpFonts()
{
	for (var i = 0; i < Data.Fonts.Count; i++)
	{
		var dumpy = Data.Fonts[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpFont(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpPaths()
{
	for (var i = 0; i < Data.Paths.Count; i++)
	{
		var dumpy = Data.Paths[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpPath(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpTimelines()
{
	for (var i = 0; i < Data.Timelines.Count; i++)
	{
		var dumpy = Data.Timelines[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpTimeline(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpSequences()
{
	for (var i = 0; i < Data.Sequences.Count; i++)
	{
		var dumpy = Data.Sequences[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpSequence(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpExtensions()
{
	for (var i = 0; i < Data.Extensions.Count; i++)
	{
		var dumpy = Data.Extensions[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpExtension(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}
async Task DumpCurves()
{
	for (var i = 0; i < Data.AnimationCurves.Count; i++)
	{
		var dumpy = Data.AnimationCurves[i];
		if (!ignore.Contains(dumpy.Name.Content) && (!(CSTM.Count > 0 && !CSTM.Contains(dumpy.Name.Content))))
		{
			DumpCurve(dumpy);
			await Task.Delay(1);
		}
		else UpdateProgress();
	}
}

#endregion
#region GMS1 Decompiler

static class GMS1
{
	public const string header = "<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->";

}

#endregion

#region Decompiler Functions

static string regexReplacer(this string s, int index, int length, string replacement)
{
	// https://codereview.stackexchange.com/questions/119519/regex-to-first-match-then-replace-found-matches
	var builder = new StringBuilder();
	builder.Append(s.Substring(0, index));
	builder.Append(replacement);
	builder.Append(s.Substring(index + length));
	return builder.ToString();
}

// code decompiler, and turn any asset indices into equivalent asset names
ThreadLocal<GlobalDecompileContext> DECOMPILE_CONTEXT = new ThreadLocal<GlobalDecompileContext>(() => new GlobalDecompileContext(Data, false));
string decompileCode(UndertaleCode codeId)
{
	if (codeId == null)
		return "";
	if (ignore.Contains(codeId.Name.Content))
		return "";
	if (File.Exists($"{dataPath}code/{codeId.Name.Content}.gml"))
		return File.ReadAllText($"{dataPath}code/{codeId.Name.Content}.gml");
	
	string code = Decompiler.Decompile(codeId, DECOMPILE_CONTEXT.Value);
	var tempReplaces = new Dictionary<string, string>();

	// regex functions
	void quickRegex(Regex rx)
	{
		foreach (Match match in rx.Matches(code).Cast<Match>().Reverse())
		{
			var digits = match.Groups[1];
			code = code.regexReplacer(digits.Index, digits.Length, match.Groups[2].Value);
		}
	}
	void assetRegex<T>(Regex rx, IList<T> dataList)
	{
		foreach (Match match in rx.Matches(code).Cast<Match>().Reverse())
		{
			var digits = match.Groups[1];
			if (int.TryParse(digits.Value, out int digit) && digit < dataList.Count)
				code = code.regexReplacer(digits.Index, digits.Length, ((UndertaleNamedResource)dataList[digit]).Name.Content);
		}
	}

	// replace targetRooms
	/*
	assetRegex<UndertaleRoom>(new Regex(@"targetRoom =+ (\d+)", RegexOptions.IgnoreCase), Data.Rooms);

	// replace contents in pizza boxes and baddie spawners
	assetRegex<UndertaleGameObject>(new Regex(@"content =+ (\d+)", RegexOptions.IgnoreCase), Data.GameObjects);

	// replace sprite indices
	assetRegex<UndertaleSprite>(new Regex(@"spr(?:ite)?(?:_[^\s]+)? =+ (\d+)", RegexOptions.IgnoreCase), Data.Sprites);
	*/

	// sprite_index = choose() conundrum
	foreach (Match match in new Regex(@"sprite_index = choose\(([\d ,]+)\)", RegexOptions.IgnoreCase).Matches(code).Cast<Match>().Reverse())
	{
		var digits = match.Groups[1];
		var digits_final = digits.Value;

		string[] subs = digits_final.Split(", ");
		foreach (var sub in subs)
		{
			if (int.TryParse(sub, out int digit))
				digits_final = digits_final.Replace(sub, Data.Sprites[digit].Name.Content);
		}

		code = code.regexReplacer(digits.Index, digits.Length, digits_final);
	}

	// scr_soundeffect(1, 2, etc) conundrum
	/*
	foreach (Match match in new Regex(@"(?:scr_sound|scr_soundeffect|scr_music)\(([\d ,]+)\)", RegexOptions.IgnoreCase).Matches(code).Cast<Match>().Reverse())
	{
		var digits = match.Groups[1];
		var digits_final = digits.Value;

		string[] subs = digits_final.Split(", ");
		foreach (var sub in subs)
		{
			if (int.TryParse(sub, out int digit))
				digits_final = digits_final.Replace(sub, Data.Sounds[digit].Name.Content);
		}

		code = code.regexReplacer(digits.Index, digits.Length, digits_final);
	}

	// replace sound indices
	assetRegex<UndertaleSound>(new Regex(@"(?:snd|sound)(?:_[^\s]+)? =+ (\d+)", RegexOptions.IgnoreCase), Data.Sounds);
	*/

	// referencing an inst_XXXXXX
	if (Data.IsGameMaker2())
	{
		foreach (Match match in new Regex(@"(\d+)\.[^0-9].*").Matches(code).Cast<Match>().Reverse())
		{
			var digits = match.Groups[1];
			if (int.TryParse(digits.Value, out int digit) && digit > 100000)
			{
				code = code.regexReplacer(digits.Index, digits.Length, instName((int)digit));
				tempReplaces.Add(digit.ToString(), instName((int)digit));
			}
		}
	}

	// temp replaces
	foreach (var i in tempReplaces)
		code = code.Replace(i.Key, i.Value);

	// attempt to fix utmt 2.3 decompilation issues
	//if (Data.GMS2_3)
	//{
	//	quickRegex(new Regex(@"((.+\.)\2)"));
		//quickRegex(new Regex(@"[^ ]*(gml_Script_(.+\((?:.*)\)))"));
	//	code = code.Replace("gml_Script_", "");
	//	quickRegex(new Regex(@"function.*?(?=(\n    return;)())", RegexOptions.Singleline));
	//}
	return code;
}

// generate a random "inst_XXXXXXXX" with the instance id.
string instName(int id)
{
	const string hex = "0123456789ABCDEF";
	var r = new Random(id);
	return "inst_" + new string(Enumerable.Range(1, 8).Select(_ => hex[r.Next(hex.Length)]).ToArray());
}

// progress bar
void SetupProgress(string status, double progress, double max)
{
	SetProgressBar(null, status, progress, max);
}
void UpdateProgress(string status = "")
{
	IncrementProgressParallel();
	if (status != "")
		UpdateProgressStatus(status);
}

// extract icon from file
Icon getIcon(string filePath)
{
	Icon result;
	try
	{
		result = Icon.ExtractAssociatedIcon(filePath);
	}
	catch
	{
		result = (Icon)null;
	}
	return result;
}

// make a json out of an object
void doJson(object obj, string path = "")
{
	// prepare json writer
	var settings = new JsonSerializerSettings
	{
		Formatting = Newtonsoft.Json.Formatting.Indented,
		ObjectCreationHandling = ObjectCreationHandling.Replace,
		ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
	};

	// turn the class into a json and export it
	string jsonString = JsonConvert.SerializeObject(obj, settings);
	File.WriteAllText(rootPath + path, jsonString);
}

// simply serialize without saving
string debugJson(object obj)
{
	return JsonConvert.SerializeObject(obj, new JsonSerializerSettings { Formatting = Newtonsoft.Json.Formatting.Indented });
}

// add folders to data file
void addFolder(string n, string p, int o)
{
	foreach (var f in exportData.Folders)
	{
		if (f.name == n)
			return; // folder already exists
	}

	exportData.Folders.Add(new GMProject.GMFolder
	{
		name = n,
		folderPath = $"folders/{p}.yy",
		order = o
	});
}
void addFolder(string n)
{
	addFolder(n, n, exportData.Folders.Count + 1);
}

#endregion
#region Startup Form

// I am so sorry for this
bool DUMP, isGMS1, OPTN, OBJT, ROOM, EXTN, SCPT, TMLN, SOND, SHDR, PATH, ACRV, SEQN, FONT, SPRT, BGND;
List<string> CSTM = new List<string>();

var tooltip = new ToolTip();
Form FORM = new Form()
{
	AutoSize = true,
	Text = "Decompiler",
	MaximizeBox = false,
	MinimizeBox = false,
	StartPosition = FormStartPosition.CenterScreen,
	FormBorderStyle = FormBorderStyle.FixedDialog,
};
FORM.Controls.Add(new Label()
{
	Text = "Warning: Decompiling with UTMT is an unreliable process.\nSometimes specific code snippets enter an infinite loop of decompilation and freeze the script until you kill the task.\nAnd since you're decompiling a lot of code at once, it has way more chances of happening, so proceed at your own risk.",
	AutoSize = true,
	Location = new System.Drawing.Point(8, 8),
});
FORM.Controls.Add(new Label()
{
	Text = "Select which resources you want to dump:",
	AutoSize = true,
	Location = new System.Drawing.Point(8, 72),
	Font = new Font(Label.DefaultFont, FontStyle.Bold)
});

var _OPTN = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 0), 100 + (32 * 0)),
	Text = "Options",
	Checked = true
};
FORM.Controls.Add(_OPTN);

var _OBJT = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 1), 100 + (32 * 0)),
	Text = "Objects",
	Checked = true
};
FORM.Controls.Add(_OBJT);

var _ROOM = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 2), 100 + (32 * 0)),
	Text = "Rooms",
	Checked = true
};
FORM.Controls.Add(_ROOM);

var _EXTN = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 3), 100 + (32 * 0)),
	Text = "Extensions",
	Checked = true
};
FORM.Controls.Add(_EXTN);

var _SCPT = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 4), 100 + (32 * 0)),
	Text = "Scripts",
	Checked = true
};
FORM.Controls.Add(_SCPT);

var _TMLN = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 5), 100 + (32 * 0)),
	Text = "Timelines",
	Checked = true
};
FORM.Controls.Add(_TMLN);

var _SOND = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 0), 100 + (32 * 1)),
	Text = "Sounds",
	Checked = true
};
FORM.Controls.Add(_SOND);

var _SHDR = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 1), 100 + (32 * 1)),
	Text = "Shaders",
	Checked = true
};
FORM.Controls.Add(_SHDR);

var _PATH = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 2), 100 + (32 * 1)),
	Text = "Paths",
	Checked = true
};
FORM.Controls.Add(_PATH);

var _ACRV = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 3), 100 + (32 * 1)),
	Text = "Anim. Curves",
	Checked = true,
};
if (Data.AnimationCurves == null)
{
	_ACRV.Enabled = false;
	_ACRV.Checked = false;
	_ACRV.Text = "ACRV (2.3+)";
}
FORM.Controls.Add(_ACRV);

var _SEQN = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 4), 100 + (32 * 1)),
	Text = "Sequences",
	Checked = true,
};
if (Data.Sequences == null)
{
	_SEQN.Enabled = false;
	_SEQN.Checked = false;
	_SEQN.Text = "SEQN (2.3+)";
}
FORM.Controls.Add(_SEQN);

var _FONT = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 5), 100 + (32 * 1)),
	Text = "Fonts",
	Checked = true
};
FORM.Controls.Add(_FONT);

var _SPRT = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 0), 100 + (32 * 2)),
	Text = "Sprites",
	Checked = true
};
FORM.Controls.Add(_SPRT);

var _BGND = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 1), 100 + (32 * 2)),
	Text = (Data.IsGameMaker2() ? "Backgrounds" : "Tilesets"),
	Checked = true
};
FORM.Controls.Add(_BGND);

var _PJCT = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 2), 100 + (32 * 2)),
	Text = "Project File",
	Checked = true
};
FORM.Controls.Add(_PJCT);

// custom
var _CSTM = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 1), 228 + (24 * 0)),
	Text = "Pick Assets",
	AutoSize = true
};
_CSTM.CheckedChanged += (o, e) =>
{
	if (_CSTM.Checked)
	{
		_OBJT.Enabled = _ROOM.Enabled = _EXTN.Enabled = _SCPT.Enabled = _TMLN.Enabled = _SOND.Enabled = _SHDR.Enabled = _PATH.Enabled = _ACRV.Enabled = _SEQN.Enabled = _FONT.Enabled = _SPRT.Enabled = _BGND.Enabled = false;
		_OBJT.Checked = _ROOM.Checked = _EXTN.Checked = _SCPT.Checked = _TMLN.Checked = _SOND.Checked = _SHDR.Checked = _PATH.Checked = _ACRV.Checked = _SEQN.Checked = _FONT.Checked = _SPRT.Checked = _BGND.Checked = false;
		_CMBT.Enabled = true;
	}
	else
	{
		_OBJT.Enabled = _ROOM.Enabled = _EXTN.Enabled = _SCPT.Enabled = _TMLN.Enabled = _SOND.Enabled = _SHDR.Enabled = _PATH.Enabled = _ACRV.Enabled = _SEQN.Enabled = _FONT.Enabled = _SPRT.Enabled = _BGND.Enabled = true;
		_CMBT.Enabled = false;

		if (Data.Sequences == null)
			_SEQN.Enabled = false;
		if (Data.AnimationCurves == null)
			_ACRV.Enabled = false;
	}
};
FORM.Controls.Add(_CSTM);
tooltip.SetToolTip(_CSTM, "Individually pick one by one which resources you want to dump.");

// customize button
var _CMBT = new Button()
{
	Location = new System.Drawing.Point(16 + (120 * 1) + 92, 228 + (24 * 0) - 4),
	Text = "Change...",
	AutoSize = true,
	Enabled = false
};
_CMBT.Click += (o, e) =>
{
	// make custom form
	FORM.Enabled = false;

	var form2 = new Form()
	{
		AutoSize = true,
		Text = "Asset Picker",
		MaximizeBox = false,
		MinimizeBox = false,
		StartPosition = FormStartPosition.CenterScreen,
		FormBorderStyle = FormBorderStyle.FixedDialog,
		ControlBox = false
	};

	// tree view
	var treeView = new TreeView()
	{
		Location = new System.Drawing.Point(4, 24 + 4 + 4),
		Height = 400,
		Width = 200,
	};

	treeView.BeginUpdate();
	treeView.Nodes.Add("Data").Expand();
	treeView.Nodes[0].Nodes.Add("Sounds");
	treeView.Nodes[0].Nodes.Add("Sprites");
	treeView.Nodes[0].Nodes.Add(Data.IsGameMaker2() ? "Tilesets" : "Backgrounds");
	treeView.Nodes[0].Nodes.Add("Paths");
	treeView.Nodes[0].Nodes.Add("Scripts");
	treeView.Nodes[0].Nodes.Add("Shaders");
	treeView.Nodes[0].Nodes.Add("Fonts");
	treeView.Nodes[0].Nodes.Add("Timelines");
	treeView.Nodes[0].Nodes.Add("Game objects");
	treeView.Nodes[0].Nodes.Add("Rooms");
	treeView.Nodes[0].Nodes.Add("Extensions");

	if (Data.Sequences != null)
		treeView.Nodes[0].Nodes.Add("Sequences");
	if (Data.AnimationCurves != null)
		treeView.Nodes[0].Nodes.Add("Curves");

	UpdateTree(treeView, Data, "");
	treeView.EndUpdate();

	// search bar
	var searchbar = new TextBox()
	{
		Location = new System.Drawing.Point(4, 4),
		Width = 200,
	};
	searchbar.TextChanged += (o, s) =>
	{
		treeView.BeginUpdate();
		UpdateTree(treeView, Data, searchbar.Text);
		treeView.EndUpdate();
	};

	// list box
	var listbox = new ListBox()
	{
		Location = new System.Drawing.Point(300, 24 + 4 + 4),
		Height = 400,
		Width = 200,
		HorizontalScrollbar = true
	};
	UpdateList(listbox, "");

	// search bar 2
	var searchbar2 = new TextBox()
	{
		Location = new System.Drawing.Point(300, 4),
		Width = 200,
	};
	searchbar2.TextChanged += (o, s) =>
	{
		listbox.BeginUpdate();
		UpdateList(listbox, searchbar2.Text);
		listbox.EndUpdate();
	};

	// double click left side
	treeView.NodeMouseDoubleClick += (s, e) =>
	{
		if (!CSTM.Contains(e.Node.Text) && e.Node.Level == 2)
			CSTM.Add(e.Node.Text);
		UpdateList(listbox, searchbar2.Text);
	};
	listbox.DoubleClick += (s, e) =>
	{
		CSTM.RemoveAll(r => r == listbox.SelectedItem);
		UpdateList(listbox, searchbar2.Text);
	};

	// ok
	var OKBT = new Button()
	{
		Location = new System.Drawing.Point(215, 180),
		Text = "OK",
		Height = 32
	};
	OKBT.Click += (o, s) =>
	{
		FORM.Enabled = true;
		form2.Close();
	};
	form2.Controls.Add(OKBT);

	// >
	var ADBT = new Button()
	{
		Location = new System.Drawing.Point(215, 140),
		Text = "->",
		Height = 32
	};
	ADBT.Click += (o, s) =>
	{
		if (!CSTM.Contains(treeView.SelectedNode.Text))
			CSTM.Add(treeView.SelectedNode.Text);
		UpdateList(listbox, searchbar2.Text);
	};
	form2.Controls.Add(ADBT);

	// <
	var RMBT = new Button()
	{
		Location = new System.Drawing.Point(215, 220),
		Text = "<-",
		Height = 32
	};
	RMBT.Click += (o, s) =>
	{
		CSTM.RemoveAll(r => r == listbox.SelectedItem);
		UpdateList(listbox, searchbar2.Text);
	};
	form2.Controls.Add(RMBT);

	// add them
	form2.Controls.Add(treeView);
	form2.Controls.Add(searchbar);
	form2.Controls.Add(listbox);
	form2.Controls.Add(searchbar2);

	void UpdateList(ListBox list, string search)
	{
		list.Items.Clear();
		foreach (var i in CSTM)
		{
			if (i.Contains(search))
				list.Items.Add(i);
		}
	}
	void UpdateTree(TreeView tree, UndertaleData data, string search)
	{
		foreach (TreeNode i in tree.Nodes[0].Nodes)
			i.Nodes.Clear();

		// sounds
		foreach (var i in data.Sounds)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[0].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// sprites
		foreach (var i in data.Sprites)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[1].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// backgrounds
		foreach (var i in data.Backgrounds)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[2].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// paths
		foreach (var i in data.Paths)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[3].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// scripts
		foreach (var i in data.Scripts)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[4].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// shaders
		foreach (var i in data.Shaders)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[5].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// fonts
		foreach (var i in data.Fonts)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[6].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// timelines
		foreach (var i in data.Timelines)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[7].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// objects
		foreach (var i in data.GameObjects)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[8].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// rooms
		foreach (var i in data.Rooms)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[9].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// extensions
		foreach (var i in data.Extensions)
		{
			if (i.Name.Content.Contains(search))
				tree.Nodes[0].Nodes[10].Nodes.Add(new TreeNode(i.Name.Content));
		}

		// sequences
		if (data.Sequences != null)
		{
			foreach (var i in data.Sequences)
			{
				if (i.Name.Content.Contains(search))
					tree.Nodes[0].Nodes[11].Nodes.Add(new TreeNode(i.Name.Content));
			}
		}

		// animation curves
		if (data.AnimationCurves != null)
		{
			foreach (var i in data.AnimationCurves)
			{
				if (i.Name.Content.Contains(search))
					tree.Nodes[0].Nodes[12].Nodes.Add(new TreeNode(i.Name.Content));
			}
		}
	}
	form2.ShowDialog();
};
FORM.Controls.Add(_CMBT);

// settings
FORM.Controls.Add(new Label()
{
	Text = "Decompiler settings",
	AutoSize = true,
	Location = new System.Drawing.Point(8, 200),
	Font = new Font(Label.DefaultFont, FontStyle.Bold)
});

var _EROR = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 0), 228 + (24 * 0)),
	Text = "Show Errors",
	Checked = false
};
FORM.Controls.Add(_EROR);
tooltip.SetToolTip(_EROR, "If unchecked, all errors will be logged in a text file.");

var _APND = new CheckBox()
{
	Location = new System.Drawing.Point(16 + (120 * 0), 228 + (24 * 1)),
	Text = "Append To Project",
	Checked = false,
	AutoSize = true
};
_APND.CheckedChanged += (o, s) =>
{
	if (_APND.Checked)
	{
		_OPTN.Enabled = _OPTN.Checked = false;
		_PJCT.Enabled = _PJCT.Checked = false;
	}
	else
	{
		_OPTN.Enabled = true;
		_PJCT.Enabled = true;
	}
};
FORM.Controls.Add(_APND);
tooltip.SetToolTip(_APND, "Adds the decompiled resources to an existing project file.");

// if appended use this folder
var APNDREF = new IdReference
{
	name = "Decompiled",
	path = "folders/Decompiled.yy"
};

// ok button
var OKBT = new Button()
{
	Text = (Directory.Exists($"{rootPath}") ? "Overwrite Dump" : "Start Dump"),
	Dock = DockStyle.Bottom,
	Height = 48,
};
OKBT.Click += (o, s) =>
{
	FORM.Enabled = false;

	// warnings
	if (Data.IsYYC() && (_SCPT.Checked || _OBJT.Checked || _TMLN.Checked))
	{
		if (!ScriptQuestion("This game is YYC compiled, tl;dr the game's code is unavailable, so you're not getting anything playable out of this. The most use you'd get out of it is maybe checking out the rooms in a more comfy editor.\n\nAre you SURE that you want to continue?"))
		{
			FORM.Close();
			return;
		}
	}
	else if (!isGMS1 && !Data.IsGameMaker2() && (_SCPT.Checked || _OBJT.Checked || _ROOM.Checked))
	{
		if (!ScriptQuestion("This game is made in GMS1, and you're decompiling to a GMS2 project. The format differences are huge so a LOT of stuff is bound to break.\n\nAre you SURE that you want to continue?"))
		{
			FORM.Close();
			return;
		}
	}
	else if (isGMS1 && Data.IsGameMaker2())
	{
		if (!ScriptQuestion("This game is made in GMS2, and you're decompiling to a GMS1 project. The format differences are huge so a LOT of stuff is bound to break.\n\nAre you SURE that you want to continue?"))
		{
			FORM.Close();
			return;
		}
	}
	/*
	if (Data.TexturePageItems.Count >= 5000 && _SPRT.Checked)
	{
		if (!ScriptQuestion($"This game seems to have a LOT of texture page items ({Data.TexturePageItems.Count} to be exact,) and these are the thing that takes the longest to export.\n\nAre you SURE that you want to continue?"))
		{
			FORM.Close();
			return;
		}
	}
	*/

	// clear custom assets if unchecked
	if (!_CSTM.Checked)
		CSTM.Clear();

	// append to project
	if (_APND.Checked)
	{
		//ScriptMessage("You selected the \"Append to Project\" option, which will decompile the assets to an already existing project file.\n\nSelect the project file you want to decompile to, and the dump will start.");
		using (var openFileDialog = new OpenFileDialog())
		{
			openFileDialog.Filter = "GameMaker Project (*.yyp)|*.yyp";
			openFileDialog.RestoreDirectory = true;

			if (openFileDialog.ShowDialog() == DialogResult.OK)
			{
				rootPath = Path.GetDirectoryName(openFileDialog.FileName) + "\\";
				
				var fileStream = openFileDialog.OpenFile();
				try
				{
					using (StreamReader reader = new StreamReader(fileStream))
						exportData = (GMProject)JsonConvert.DeserializeObject(reader.ReadToEnd(), typeof(GMProject));
				}
				catch (Exception e)
				{
					// invalid file
					ScriptMessage("The project file has failed to load.\nOnly projects of version 1.6 are supported.");
					FORM.Enabled = true;
					return;
				}

				// invalid version
				if (exportData.resourceVersion != "1.6")
				{
					if (!ScriptQuestion($"The project version should be 1.6, but this one's seems to be {exportData.resourceVersion}.\nIt loaded properly, but it *could* corrupt the project.\n\nAre you SURE that you want to continue?"))
					{
						FORM.Enabled = true;
						return;
					}
				}
			}
			else
			{
				FORM.Enabled = true;
				return;
			}
		}
	}

	// I'm not happy
	FORM.Close();
	DUMP = true;

	OPTN = _OPTN.Checked;
	OBJT = _OBJT.Checked;
	ROOM = _ROOM.Checked;
	EXTN = _EXTN.Checked;
	SCPT = _SCPT.Checked;
	TMLN = _TMLN.Checked;
	SOND = _SOND.Checked;
	SHDR = _SHDR.Checked;
	PATH = _PATH.Checked;
	ACRV = _ACRV.Checked;
	SEQN = _SEQN.Checked;
	FONT = _FONT.Checked;
	SPRT = _SPRT.Checked;
	BGND = _BGND.Checked;

	skipErrors = (!_EROR.Checked);
};
FORM.Controls.Add(OKBT);

FORM.Height += 64;
FORM.AcceptButton = OKBT;
Application.EnableVisualStyles();
FORM.ShowDialog();

if (!DUMP)
	return;

#endregion

// prepare project file
Directory.CreateDirectory(rootPath);
if (exportData == null)
{
	exportData = new GMProject
	{
		name = Data.GeneralInfo.Name.Content,
		isEcma = (Data.GeneralInfo.Info.HasFlag(UndertaleGeneralInfo.InfoFlags.JavaScriptMode))
	};
	exportData.MetaData.Add("IDEVersion", "2022.9.0.0");

	// add default folders
	addFolder("Sprites");
	addFolder("Tile Sets");
	addFolder("Sounds");
	addFolder("Paths");
	addFolder("Scripts");
	addFolder("Shaders");
	addFolder("Fonts");
	addFolder("Timelines");
	addFolder("Objects");
	addFolder("Rooms");
	addFolder("Sequences");
	addFolder("Animation Curves");
	addFolder("Notes");
	addFolder("Extensions");

	// groups
	if (SPRT && Data.TextureGroupInfo != null)
	{
		foreach (var i in Data.TextureGroupInfo)
		{
			var tg = new GMTextureGroup { name = i.Name.Content };

			// detect compression format (pre 2022.9)
			/*
			if (Data.UseBZipFormat)
				tg.compressFormat = "bz2";
			else if (Data.UseQoiFormat)
				tg.compressFormat = "qoi";
			else
				tg.compressFormat = "png";
			*/

			// detect 2022.9 external textures
			if ((int)i.LoadType != 0)
			{
				tg.loadType = "dynamicpages";
				tg.directory = i.Directory.Content;
			}

			// align to texture pages for future use
			foreach (var j in i.TexturePages)
			{
				tpageAlign.Add(j.Resource.Name.Content, tg.name);

				// extra settings
				tg.mipsToGenerate = (int)j.Resource.GeneratedMips;
				if (j.Resource.Scaled == 0)
					tg.isScaled = false;

				// detect compression format
				if (j.Resource.TextureData.FormatBZ2)
					tg.compressFormat = "bz2";
				else if (j.Resource.TextureData.FormatQOI)
					tg.compressFormat = "qoi";
				else
					tg.compressFormat = "png";
			}
			foreach (var j in i.Sprites)
				tpageAlign.Add(j.Resource.Name.Content, tg.name);
			foreach (var j in i.Fonts)
				tpageAlign.Add(j.Resource.Name.Content, tg.name);
			foreach (var j in i.Tilesets)
				tpageAlign.Add(j.Resource.Name.Content, tg.name);

			// DON'T add if it's a separate texture page
			if (!(i.Name.Content.StartsWith("__YY__") && i.Name.Content.Contains("_YYG_AUTO_GEN_TEX_GROUP_NAME_")))
				exportData.TextureGroups.Add(tg);
		}
	}
	else
		exportData.TextureGroups.Add(new GMTextureGroup());

	if (SOND && Data.AudioGroups != null)
	{
		foreach (var i in Data.AudioGroups)
			exportData.AudioGroups.Add(new GMAudioGroup { name = i.Name.Content });
	}
	else
		exportData.AudioGroups.Add(new GMAudioGroup());
}
else
{
	// add default folders
	if (!exportData.Folders.Any(i => i.name == "Decompiled"))
		addFolder("Decompiled");

	// audio groups
	if (SOND && Data.AudioGroups != null)
	{
		foreach (var i in Data.AudioGroups)
		{
			if (!exportData.AudioGroups.Any(x => x.name == i.Name.Content))
				exportData.AudioGroups.Add(new GMAudioGroup { name = i.Name.Content });
		}
	}
}

// resource dumps
StartProgressBarUpdater(); // progress bar
if (OPTN)
	DumpOptions();

if (OBJT || CSTM.Count > 0)
{
	SetupProgress("Objects", 0, Data.GameObjects.Count);
	await DumpObjects();
}

if (ROOM || CSTM.Count > 0)
{
	SetupProgress("Rooms", 0, Data.Rooms.Count);
	await DumpRooms();

	// room order
	for (var i = 0; i < Data.GeneralInfo.RoomOrder.Count; i++)
	{
		var r = Data.GeneralInfo.RoomOrder[i].Resource;
		var rname = r.Name.Content;

		if (ignore.Contains(rname) || (CSTM.Count > 0 && !CSTM.Contains(rname)))
			continue;

		var ron = new GMProject.GMRoomOrderNode
		{
			roomId = new IdReference
			{
				name = rname,
				path = $"rooms/{rname}/{rname}.yy"
			}
		};
		exportData.RoomOrderNodes.Add(ron);
	}
}

if (EXTN || CSTM.Count > 0)
{
	SetupProgress("Extensions", 0, Data.Extensions.Count);
	await DumpExtensions();
}

if (SCPT || CSTM.Count > 0)
{
	SetupProgress("Scripts", 0, Data.Scripts.Count);
	await DumpScripts();
}

if (TMLN || CSTM.Count > 0)
{
	SetupProgress("Timelines", 0, Data.Timelines.Count);
	await DumpTimelines();
}

if (SOND || CSTM.Count > 0)
{
	SetupProgress("Sounds", 0, Data.Sounds.Count);
	await DumpSounds();
}

if (SHDR || CSTM.Count > 0)
{
	SetupProgress("Shaders", 0, Data.Shaders.Count);
	await DumpShaders();
}

if (PATH || CSTM.Count > 0)
{
	SetupProgress("Paths", 0, Data.Paths.Count);
	await DumpPaths();
}

if ((ACRV || CSTM.Count > 0) && Data.AnimationCurves != null)
{
	SetupProgress("Animation Curves", 0, Data.AnimationCurves.Count);
	await DumpCurves();
}

if ((SEQN || CSTM.Count > 0) && Data.Sequences != null)
{
	SetupProgress("Sequences", 0, Data.Sequences.Count);
	await DumpSequences();
}

if (FONT || CSTM.Count > 0)
{
	SetupProgress("Fonts", 0, Data.Fonts.Count);
	await DumpFonts();
}

if (SPRT || CSTM.Count > 0)
{
	SetupProgress("Sprites", 0, Data.Sprites.Count);
	await DumpSprites();
}

if (BGND || CSTM.Count > 0)
{
	SetupProgress((Data.IsGameMaker2() ? "TileSets" : "Backgrounds"), 0, Data.Backgrounds.Count);
	await DumpTilesets();
}

if (_PJCT.Checked && SCPT)
{
	// add warning note
	var note = new GMNotes()
	{
		name = "readme",
		parent = new IdReference()
		{
			name = "Notes",
			path = "folders/Notes.yy"
		}
	};
	string notePath = $"notes/{note.name}/";
	Directory.CreateDirectory(rootPath + notePath);

	var str = @"As a warning, neither this decompiler nor even UTMT can be perfect.
There's likely gonna be some stuff you're gonna have to fix on your own.
Most notably asset indices. GameMaker stores assets referenced in the code as just numbers,
and the decompiler would have to GUESS which variables are for assets and which aren't.
";
	//if (Data.GMS2_3)
		//str += "\nAlso since this game is made in GM2.3+ some of the code probably failed to decompile.\nI can't do anything about this, it's UTMT's fault. Just fix it yourself.\n";

	//File.WriteAllText(rootPath + $"{notePath}{note.name}.txt", str);
	//doJson(note, $"{notePath}/{note.name}.yy");
	//AddResource(new IdReference
	//{
	//	name = note.name,
	//	path = $"{notePath}{note.name}.yy"
	//});
}

// export final yyp
if (_PJCT.Checked || _APND.Checked)
	doJson(exportData, $"{exportData.name}.yyp");

// cleanup
await StopUpdater();
worker.Cleanup();
HideProgressBar();

// done
if (errorList.Count > 0)
{
	File.WriteAllLinesAsync(dataPath + "error_log.txt", errorList);
	ScriptMessage($"Done with {errorList.Count} errors.\n{rootPath}\n\nA text file can be found in the data folder with logged exception messages for each error.");
}
else
	ScriptMessage("Done!" + (_PJCT.Checked ? " Remember to copy any necessary files into the \"datafiles\" folder." : ""));

if (!_APND.Checked)
	Process.Start("explorer.exe", rootPath); // pray that this works
